{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Melange OCaml for JavaScript developers Melange is a backend for the OCaml compiler that emits JavaScript. Melange strives to provide the best integration with both the OCaml and JavaScript ecosystems. To know more about it start by reading the introductory tutorial , then check the Learn section for more information. Features A Solid Type System Melange leverages OCaml's powerful type system to catch more bugs at compile time. Large, complex codebases become easy to maintain and refactor. First-Class Editor and Tooling Melange fully utilizes the power of the OCaml Platform to provide integrations with editors such as VSCode, Vim, or Emacs, with features like type inspection, autocomplete, and more. It also has first-class integration with Dune , OCaml's most used build system. JavaScript Integration Whether you want to use existing JavaScript packages from NPM, or use your own JavaScript libraries in your projects, Melange has you covered. With an expressive bindings language, and an ergonomic compilation model, Melange can help you build robust applications that leverage functionality from the JavaScript ecosystem. Stable and Industry Backed Melange builds on top of decades of type system research, compiler engineering and tooling development to provide a polished developer experience. Companies like Ahrefs use Melange daily to deploy web applications for their users.","title":"Home"},{"location":"#melange","text":"OCaml for JavaScript developers Melange is a backend for the OCaml compiler that emits JavaScript. Melange strives to provide the best integration with both the OCaml and JavaScript ecosystems. To know more about it start by reading the introductory tutorial , then check the Learn section for more information.","title":"Melange"},{"location":"api/","text":"API Melange exposes three libraries: A standard library, which mostly replicates that of OCaml for compatibility; see the docs: the Stdlib library Bindings to several browser and Node JavaScript APIs in the Js library . Data structures and collection types in the Belt library Using one or the other will depend on your application requirements, how much integration you need with existing JavaScript libraries, or other specific characteristics of your project. In any case, the three of them can be used in the same project without issues.","title":"API"},{"location":"api/#api","text":"Melange exposes three libraries: A standard library, which mostly replicates that of OCaml for compatibility; see the docs: the Stdlib library Bindings to several browser and Node JavaScript APIs in the Js library . Data structures and collection types in the Belt library Using one or the other will depend on your application requirements, how much integration you need with existing JavaScript libraries, or other specific characteristics of your project. In any case, the three of them can be used in the same project without issues.","title":"API"},{"location":"build-system/","text":"Build system Melange is deeply integrated with Dune , the most widely used build system for OCaml. This integration enables developers to create a single project with both OCaml native executables and frontend applications that are built with Melange, and even share code between both platforms in an easy manner. The way Dune and Melange work with each other is as follows: Dune orchestrates and plans the work needed to compile a project, copies files when needed, and prepares everything so that Melange takes OCaml source files and convert them into JavaScript code. Let\u2019s now dive into the Melange compilation model and go through a brief guide on how to work with Dune in Melange projects. Compilation model Melange compiles a single source file (either .ml or .re for Reason syntax) to a single JavaScript module. This simplifies debugging the produced JavaScript code and allows to import assets like CSS files and fonts in the same way as one would do in a JavaScript project. Even if Melange does not handle the bundling of JavaScript code for web applications, its compilation model allows integration with tools such as Webpack , or other alternatives . The Melange opam template can be used as reference, as it provides an example of how to integrate Melange with Webpack. Dune for Melange developers Dune is an OCaml build system that Melange projects can use to specify libraries and applications. It\u2019s optimized for monorepos and makes project maintenance easier. This section provides an overview of Dune\u2019s features and explains how to use it to build Melange applications. Features Dune is designed with OCaml in mind, which makes it an ideal tool for Melange developers. It provides several benefits, including: Easy specification of libraries and executables. Optimized for monorepos: no need for npm link or similar solutions. Easy project maintenance, as one can rearrange folders without updating the paths to libraries. Hygiene is maintained in Dune by never writing in source folders by default, unless explicitly configured to do so. All the compilation artifacts are placed in a separate _build folder. Dune provides a variety of additional features including cram tests , integration with Odoc , Melange, Js_of_ocaml , watch mode , Merlin/LSP integration for editor support, cross compilation , and generation of opam files . Creating a new project To understand how to use Dune, let\u2019s create a small Melange application using it. First of all, create an opam switch, like shown in the package management section : opam switch create . 4.14.1 --deps-only Install Dune and Melange in the switch: opam install dune melange Create a file named dune-project . This file will tell Dune a few things about our project configuration: (lang dune 3.8) (using melange 0.1) The first line (lang dune 3.8) tells Dune which version of the \"Dune language\" (the language used in dune files) we want to use. Melange is only compatible with versions of the Dune language equal or greater than 3.8. The second line (using melange 0.1) tells Dune we want to use the Melange extension of the Dune language . Adding a library Next, create a folder lib , and a dune file inside. Put the following content inside the dune file: (library (name lib) (modes melange)) Create a file lib.ml in the same folder: let name = \"Jane\" The top level configuration entries \u2014like the library one that appears in the dune file\u2014 are referred to as stanzas , and the inner ones \u2014like name and modes \u2014 are referred to as fields of the stanza. All stanzas are well covered in the Dune documentation site, where we can find the reference for the library stanza . Dune is designed to minimize changes in configuration when the project folder structure changes, so one can move around the lib folder to another place inside the project, and all build commands will still keep working without any changes in Dune configuration. Very handy! Entry points with melange.emit Libraries are useful to encapsulate behavior and logical components of our application, but they won\u2019t produce any JavaScript artifacts on their own. To generate JavaScript code, we need to define an entry point of our application. In the root folder, create another dune file: (melange.emit (target app) (libraries lib)) And an app.ml file: let () = Js.log Lib.name The melange.emit stanza is the one that tells Dune to generate JavaScript files from a set of libraries and modules. In-depth documentation about this stanza can be found on the Dune docs . The file structure of the app should look something like this: project_name/ \u251c\u2500\u2500 _opam \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 dune \u2502 \u2514\u2500\u2500 lib.ml \u251c\u2500\u2500 dune-project \u251c\u2500\u2500 dune \u2514\u2500\u2500 main.ml Building the project We can build the project now, which will produce the JavaScript code from our sources using the Melange compiler: $ dune build @melange This command tells dune to build all the targets that have an alias melange attached to them. Aliases are build targets that don\u2019t produce any file and have configurable dependencies. By default, all the targets in a melange.emit stanza and the libraries it depends on are attached to the melange alias. We can define explicit aliases though, as we will see below. If everything went well, we should be able to run the resulting JavaScript with Node. As we mentioned while going through its features, Dune places all artifacts inside the _build folder to not pollute any source folders. So we will point Node to the script placed in that folder, to see the expected output: $ node _build/default/app/app.js Jane One thing to note is that we have to look for the app.js file inside an app folder, but we don\u2019t have any such folder in our sources. The reason why this folder is created is to support multiple melange.emit stanzas in the same folder. To support this scenario, Dune will use the target field defined in the melange.emit to place the artifacts generated from a melange.emit stanza in the following folder: _build/default/$path_to_melange_emit_stanza_directory/$target This allows to have two or more melange.emit stanzas in the same folder without conflicts or overrides between each other. Using aliases The default melange alias is useful for prototyping or when working on small projects, but larger projects might define multiple entry points or melange.emit stanzas. In these cases, it is useful to have a way to build individual stanzas. To do so, one can define explicit aliases for each one of them by using the alias field. Let\u2019s define a custom alias app for our melange.emit stanza: (melange.emit (target app) (alias app) (libraries lib)) Now, when building with Dune, we can refer to this new alias: $ dune build @app Note that if we try to build again using the default melange alias, Dune will return an error, as there are no more targets attached to it. $ dune build @melange Error: Alias \"melange\" specified on the command line is empty. It is not defined in . or any of its descendants. Handling assets The last topic we will go through in this demo project is asset handling. Sometimes we want to use CSS files, fonts, or other assets in our Melange projects. Due to the way Dune works, our assets will have to be copied to the _build folder as well. To make this process as easy as possible, the Melange integration with Dune provides two ways to do this: For library stanzas, a field melange.runtime_deps For melange.emit stanzas, a field runtime_deps Both fields are documented in the Melange page of the Dune documentation site. For the sake of learning how to work with assets in a Melange project, let\u2019s say that we want to read the string in Lib.name from a text file. We will combine the field melange.runtime_deps with some bindings to Node that Melange provides. Check the next section, \"Communicate with JavaScript\" , it you want to learn more about how bindings work. So, let\u2019s add a new file name.txt inside lib folder, that just contains the name Jane . Then, adapt the lib/dune file. We will need to add the melange.runtime_deps field, as well as a preprocessing field that will allow to use the bs.raw extension (more about these extensions in the \"Communicate with JavaScript\" section), in order to get the value of the __dirname environment variable: (library (name lib) (modes melange) (melange.runtime_deps name.txt) (preprocess (pps melange.ppx))) Finally, update lib/lib.ml to read from the recently added file: let dir = [%bs.raw \"__dirname\"] let file = \"name.txt\" let name = Node.Fs.readFileSync (dir ^ \"/\" ^ file) `ascii After these changes, once we build the project, we should still be able to run the application file with Node: $ dune build @app $ node _build/default/app/app.js Jane The same approach could be used to copy fonts, CSS or SVG files, or any other asset in your project. Note that Dune offers great flexibility to copy runtime assets using wildcards or globs, so one can simplify the configuration when there are a lot of runtime dependencies, for example: (melange.runtime_deps (glob_files styles/*.css) (glob_files images/*.png) (glob_files static/*.{pdf,txt})) See the documentation for glob dependencies to learn more about it. With runtime dependencies, we have reached the end of this Dune guide for Melange developers. For further details about how Dune works and its integration with Melange, check the Dune documentation , and the Melange opam template .","title":"Build system"},{"location":"build-system/#build-system","text":"Melange is deeply integrated with Dune , the most widely used build system for OCaml. This integration enables developers to create a single project with both OCaml native executables and frontend applications that are built with Melange, and even share code between both platforms in an easy manner. The way Dune and Melange work with each other is as follows: Dune orchestrates and plans the work needed to compile a project, copies files when needed, and prepares everything so that Melange takes OCaml source files and convert them into JavaScript code. Let\u2019s now dive into the Melange compilation model and go through a brief guide on how to work with Dune in Melange projects.","title":"Build system"},{"location":"build-system/#compilation-model","text":"Melange compiles a single source file (either .ml or .re for Reason syntax) to a single JavaScript module. This simplifies debugging the produced JavaScript code and allows to import assets like CSS files and fonts in the same way as one would do in a JavaScript project. Even if Melange does not handle the bundling of JavaScript code for web applications, its compilation model allows integration with tools such as Webpack , or other alternatives . The Melange opam template can be used as reference, as it provides an example of how to integrate Melange with Webpack.","title":"Compilation model"},{"location":"build-system/#dune-for-melange-developers","text":"Dune is an OCaml build system that Melange projects can use to specify libraries and applications. It\u2019s optimized for monorepos and makes project maintenance easier. This section provides an overview of Dune\u2019s features and explains how to use it to build Melange applications.","title":"Dune for Melange developers"},{"location":"build-system/#features","text":"Dune is designed with OCaml in mind, which makes it an ideal tool for Melange developers. It provides several benefits, including: Easy specification of libraries and executables. Optimized for monorepos: no need for npm link or similar solutions. Easy project maintenance, as one can rearrange folders without updating the paths to libraries. Hygiene is maintained in Dune by never writing in source folders by default, unless explicitly configured to do so. All the compilation artifacts are placed in a separate _build folder. Dune provides a variety of additional features including cram tests , integration with Odoc , Melange, Js_of_ocaml , watch mode , Merlin/LSP integration for editor support, cross compilation , and generation of opam files .","title":"Features"},{"location":"build-system/#creating-a-new-project","text":"To understand how to use Dune, let\u2019s create a small Melange application using it. First of all, create an opam switch, like shown in the package management section : opam switch create . 4.14.1 --deps-only Install Dune and Melange in the switch: opam install dune melange Create a file named dune-project . This file will tell Dune a few things about our project configuration: (lang dune 3.8) (using melange 0.1) The first line (lang dune 3.8) tells Dune which version of the \"Dune language\" (the language used in dune files) we want to use. Melange is only compatible with versions of the Dune language equal or greater than 3.8. The second line (using melange 0.1) tells Dune we want to use the Melange extension of the Dune language .","title":"Creating a new project"},{"location":"build-system/#adding-a-library","text":"Next, create a folder lib , and a dune file inside. Put the following content inside the dune file: (library (name lib) (modes melange)) Create a file lib.ml in the same folder: let name = \"Jane\" The top level configuration entries \u2014like the library one that appears in the dune file\u2014 are referred to as stanzas , and the inner ones \u2014like name and modes \u2014 are referred to as fields of the stanza. All stanzas are well covered in the Dune documentation site, where we can find the reference for the library stanza . Dune is designed to minimize changes in configuration when the project folder structure changes, so one can move around the lib folder to another place inside the project, and all build commands will still keep working without any changes in Dune configuration. Very handy!","title":"Adding a library"},{"location":"build-system/#entry-points-with-melangeemit","text":"Libraries are useful to encapsulate behavior and logical components of our application, but they won\u2019t produce any JavaScript artifacts on their own. To generate JavaScript code, we need to define an entry point of our application. In the root folder, create another dune file: (melange.emit (target app) (libraries lib)) And an app.ml file: let () = Js.log Lib.name The melange.emit stanza is the one that tells Dune to generate JavaScript files from a set of libraries and modules. In-depth documentation about this stanza can be found on the Dune docs . The file structure of the app should look something like this: project_name/ \u251c\u2500\u2500 _opam \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 dune \u2502 \u2514\u2500\u2500 lib.ml \u251c\u2500\u2500 dune-project \u251c\u2500\u2500 dune \u2514\u2500\u2500 main.ml","title":"Entry points with melange.emit"},{"location":"build-system/#building-the-project","text":"We can build the project now, which will produce the JavaScript code from our sources using the Melange compiler: $ dune build @melange This command tells dune to build all the targets that have an alias melange attached to them. Aliases are build targets that don\u2019t produce any file and have configurable dependencies. By default, all the targets in a melange.emit stanza and the libraries it depends on are attached to the melange alias. We can define explicit aliases though, as we will see below. If everything went well, we should be able to run the resulting JavaScript with Node. As we mentioned while going through its features, Dune places all artifacts inside the _build folder to not pollute any source folders. So we will point Node to the script placed in that folder, to see the expected output: $ node _build/default/app/app.js Jane One thing to note is that we have to look for the app.js file inside an app folder, but we don\u2019t have any such folder in our sources. The reason why this folder is created is to support multiple melange.emit stanzas in the same folder. To support this scenario, Dune will use the target field defined in the melange.emit to place the artifacts generated from a melange.emit stanza in the following folder: _build/default/$path_to_melange_emit_stanza_directory/$target This allows to have two or more melange.emit stanzas in the same folder without conflicts or overrides between each other.","title":"Building the project"},{"location":"build-system/#using-aliases","text":"The default melange alias is useful for prototyping or when working on small projects, but larger projects might define multiple entry points or melange.emit stanzas. In these cases, it is useful to have a way to build individual stanzas. To do so, one can define explicit aliases for each one of them by using the alias field. Let\u2019s define a custom alias app for our melange.emit stanza: (melange.emit (target app) (alias app) (libraries lib)) Now, when building with Dune, we can refer to this new alias: $ dune build @app Note that if we try to build again using the default melange alias, Dune will return an error, as there are no more targets attached to it. $ dune build @melange Error: Alias \"melange\" specified on the command line is empty. It is not defined in . or any of its descendants.","title":"Using aliases"},{"location":"build-system/#handling-assets","text":"The last topic we will go through in this demo project is asset handling. Sometimes we want to use CSS files, fonts, or other assets in our Melange projects. Due to the way Dune works, our assets will have to be copied to the _build folder as well. To make this process as easy as possible, the Melange integration with Dune provides two ways to do this: For library stanzas, a field melange.runtime_deps For melange.emit stanzas, a field runtime_deps Both fields are documented in the Melange page of the Dune documentation site. For the sake of learning how to work with assets in a Melange project, let\u2019s say that we want to read the string in Lib.name from a text file. We will combine the field melange.runtime_deps with some bindings to Node that Melange provides. Check the next section, \"Communicate with JavaScript\" , it you want to learn more about how bindings work. So, let\u2019s add a new file name.txt inside lib folder, that just contains the name Jane . Then, adapt the lib/dune file. We will need to add the melange.runtime_deps field, as well as a preprocessing field that will allow to use the bs.raw extension (more about these extensions in the \"Communicate with JavaScript\" section), in order to get the value of the __dirname environment variable: (library (name lib) (modes melange) (melange.runtime_deps name.txt) (preprocess (pps melange.ppx))) Finally, update lib/lib.ml to read from the recently added file: let dir = [%bs.raw \"__dirname\"] let file = \"name.txt\" let name = Node.Fs.readFileSync (dir ^ \"/\" ^ file) `ascii After these changes, once we build the project, we should still be able to run the application file with Node: $ dune build @app $ node _build/default/app/app.js Jane The same approach could be used to copy fonts, CSS or SVG files, or any other asset in your project. Note that Dune offers great flexibility to copy runtime assets using wildcards or globs, so one can simplify the configuration when there are a lot of runtime dependencies, for example: (melange.runtime_deps (glob_files styles/*.css) (glob_files images/*.png) (glob_files static/*.{pdf,txt})) See the documentation for glob dependencies to learn more about it. With runtime dependencies, we have reached the end of this Dune guide for Melange developers. For further details about how Dune works and its integration with Melange, check the Dune documentation , and the Melange opam template .","title":"Handling assets"},{"location":"communicate-with-javascript/","text":"Communicate with JavaScript Melange interoperates very well with JavaScript, and provides a wide array of features to consume foreign JavaScript code. To learn about these techniques, we will first map the OCaml type system to JavaScript runtime types, then we will see the OCaml language extensions that allow these techniques to exist. Finally, we will provide a variety of use cases with examples to show how to communicate to and from JavaScript. Data types and runtime representation This is how each Melange type is converted into JavaScript values: Melange JavaScript int number nativeint number int32 number float number string string array array tuple (3, 4) array [3, 4] bool boolean Js.Nullable.t null / undefined Option.t None undefined Option.t Some( Some .. Some (None)) internal representation Option.t Some 2 2 record {x: 1; y: 2} object {x: 1, y: 2} int64 array of 2 elements [high, low] high is signed, low unsigned char 'a' -> 97 (ascii code) bytes number array list [] 0 list [x, y] { hd: x, tl: { hd: y, tl: 0 } } list [1, 2, 3] { hd: 1, tl: { hd: 2, tl: { hd: 3, tl: 0 } } } variant See below polymorphic variant See below Variants with a single non-nullary constructor: type tree = Leaf | Node of int * tree * tree (* Leaf -> 0 *) (* Node(7, Leaf, Leaf) -> { _0: 7, _1: 0, _2: 0 } *) Variants with more than one non-nullary constructor: type t = A of string | B of int (* A(\"foo\") -> { TAG: 0, _0: \"Foo\" } *) (* B(2) -> { TAG: 1, _0: 2 } *) Polymorphic variants: let u = `Foo (* \"Foo\" *) let v = `Foo(2) (* { NAME: \"Foo\", VAL: \"2\" } *) Let\u2019s see now some of these types in detail. We will first describe the shared types , which have a transparent representation as JavaScript values, and then go through the non-shared types , that have more complex runtime representations. NOTE: Relying on the non-shared data types runtime representations by reading or writing them manually from JavaScript code that communicates with Melange code might lead to runtime errors, as these representations might change in the future. Shared types The following are types that can be shared between Melange and JavaScript almost \"as is\". Specific caveats are mentioned on the sections where they apply. Strings JavaScript strings are immutable sequences of UTF-16 encoded Unicode text. OCaml strings are immutable sequences of bytes and nowadays assumed to be UTF-8 encoded text when interpreted as textual content. This is problematic when interacting with JavaScript code, because if one tries to use some unicode characters, like: let () = Js.log \"\u4f60\u597d\" It will lead to some cryptic console output. To rectify this, Melange allows to define quoted string literals using the js identifier, for example: let () = Js.log {js|\u4f60\u597d\uff0c \u4e16\u754c|js} For convenience, Melange exposes another special quoted string identifier: j . It is similar to JavaScript\u2019 string interpolation, but for variables only (not arbitrary expressions): let world = {j|\u4e16\u754c|j} let helloWorld = {j|\u4f60\u597d\uff0c$world|j} You can surround the interpolation variable in parentheses too: {j|\u4f60 \u597d\uff0c$(world)|j} . To work with strings, the Melange standard library provides some utilities in the Stdlib.String module . The bindings to the native JavaScript functions to work with strings are in the Js.String module . Floating-point numbers OCaml floats are IEEE 754 with a 53-bit mantissa and exponents from -1022 to 1023. This happens to be the same encoding as JavaScript numbers , so values of these types can be used transparently between Melange code and JavaScript code. The Melange standard library provides a Stdlib.Float module . The bindings to the JavaScript APIs that manipulate float values can be found in the Js.Float module. Integers In Melange, integers are limited to 32 bits due to the fixed-width conversion of bitwise operations in JavaScript. While Melange integers compile to JavaScript numbers, treating them interchangeably can result in unexpected behavior due to differences in precision. Even though bitwise operations in JavaScript are constrained to 32 bits, integers themselves are represented using the same floating-point format as numbers , allowing for a larger range of representable integers in JavaScript compared to Melange. When dealing with large numbers, it is advisable to use floats instead. For instance, floats are used in bindings like Js.Date . The Melange standard library provides a Stdlib.Int module . The bindings to work with JavaScript integers are in the Js.Int module. Arrays Melange arrays compile to JavaScript arrays. But note that unlike JavaScript arrays, all the values in a Melange array need to have the same type. Another difference is that OCaml arrays are fixed-sized, but on Melange side this constraint is relaxed. You can change an array\u2019s length using functions like Js.Array.push , available in the bindings to the JavaScript APIs in Js.Array . Melange standard library also has a module to work with arrays, available in Stdlib.Array (todo-fix-me.md) module. Tuples OCaml tuples are compiled to JavaScript arrays. This is convenient when writing bindings that will use a JavaScript array with heterogeneous values, but that happens to have a fixed length. As a real world example of this can be found in ReasonReact , the Melange bindings for React . In these bindings, component effects dependencies are represented as OCaml tuples, so they get compiled cleanly to JavaScript arrays by Melange. For example, some code like this: let () = React.useEffect2 (fun () -> None) (foo, bar) Will produce: React.useEffect(function () {}, [foo, bar]); Booleans Values of type bool compile to JavaScript booleans. Records Melange records map directly to JavaScript objects. If the record fields include non-shared data types (like variants), these values should be transformed separately, and not be directly used in JavaScript. Extensive documentation about interfacing with JavaScript objects using records can be found in the section below . Non-shared data types The following types differ too much between Melange and JavaScript, so while they can always be manipulated from JavaScript, it is recommended to transform them before doing so. Variants and polymorphic variants: Better transform them into readable JavaScript values before manipulating them from JavaScript, Melange provides some helpers to do so. Exceptions Option (a variant type): Better use the Js.Nullable.fromOption and Js.Nullable.toOption functions in the Js.Nullable module to transform them into either null or undefined values. List (also a variant type): use Array.of_list and Array.to_list in the Array module . Character Int64 Lazy values Language extensions In order to interact with JavaScript, Melange needs to extend the language to provide blocks that express these interactions. One approach could be to introduce new syntactic constructs (keywords and such) to do so, for example: javascript add : int -> int -> int = {|function(x,y){ return x + y }|} But this would break compatibility with OCaml, which is one of the main goals of Melange. Fortunately, OCaml provides mechanisms to extend its language without breaking compatibility with the parser or the language. These mechanisms are composed by two parts: - First, some syntax additions to define parts of the code that will be extended or replaced - Second, compile-time OCaml native programs called PPX rewriters , that will read the syntax additions defined above and proceed to extend or replace them The syntax additions come in two flavors, called extensions nodes and attributes . Extension nodes are blocks that are supposed to be replaced by a specific type of PPX rewriters called extenders. Extension nodes use the % character to be identified. Extenders will take the extension node and replace it with a valid OCaml AST (abstract syntax tree). An example where Melange uses extensions to communicate with JavaScript is to produce \"raw\" JavaScript inside a Melange program: [%%bs.raw \"var a = 1; var b = 2\"] let add = [%bs.raw \"a + b\"] Which will generate the following JavaScript code: var a = 1; var b = 2 var add = a + b The difference between one and two % characters is detailed in the OCaml documentation . Attributes are \"decorations\" applied to specific parts of the code to provide additional information. Melange uses attributes in various ways to enhance communication with JavaScript code. For instance, it introduces the bs.as attribute, which allows renaming of fields in a record on the generated JavaScript code: type t = { foo : int; [@bs.as \"foo_for_js\"] bar : string; } let t = { foo = 2; bar = \"b\" } This will generate the following JavaScript code: var t = { foo_for_js: 2, bar: \"b\" }; To learn more about preprocessors, attributes and extension nodes, check the section about PPX rewriters in the OCaml docs. List of attributes and extensions NOTE: All these attributes and extensions are prefixed with bs. for backwards compatibility. They will be updated to mel. in the future. Attributes: These attributes are used to annotate external definitions: bs.get : read JavaScript object properties statically by name, using the dot notation . bs.get_index : read a JavaScript object\u2019s properties dynamically by using the bracket notation [] bs.module : bind to a value from a JavaScript module bs.new : bind to a JavaScript class constructor bs.obj : create JavaScript object bs.return : automate conversion from nullable values to Option.t values bs.send : call a JavaScript object method using pipe first convention bs.send.pipe : call a JavaScript object method using pipe last convention bs.set : set JavaScript object properties statically by name, using the dot notation . bs.set_index : set JavaScript object properties dynamically by using the bracket notation [] bs.scope : reach to deeper properties inside a JavaScript object bs.val : bind to global JavaScript functions or other values bs.variadic : bind to a function taking variadic arguments from an array These attributes are used to annotate arguments in external definitions: bs : define function arguments as uncurried (manual) bs.int : compile function argument to an int bs.string : compile function argument to a string bs.this : bind to this based callbacks bs.uncurry : define function arguments as uncurried (automated) bs.unwrap : unwrap variant values These attributes are used in other places like records, fields, parameters, functions...: bs.as : redefine the name generated in the JavaScript output code. Used in constant function arguments , variants , polymorphic variants and record fields . bs.deriving : generate getters and setters for some types bs.inline : forcefully inline constant values bs.optional : omit fields in a record (combines with bs.deriving ) Extensions: In order to use any of these extensions, you will have to add the melange PPX preprocessor to your project. To do so, add the following to the dune file: (library (name lib) (modes melange) (preprocess (pps melange.ppx))) The same field preprocess can be added to melange.emit . Here is the list of all extensions supported by Melange: bs.debugger : insert debugger statements bs.external : read global values bs.obj : create JavaScript object literals bs.raw : write raw JavaScript code bs.re : insert regular expressions Foreign function interface Most of the system that Melange exposes to communicate with JavaScript is built on top of an OCaml language construct called external . external is a keyword for declaring a value in OCaml that will interface with C code : external my_c_function : int -> string = \"someCFunctionName\" It is like a let binding, except that the body of an external is a string. That string has a specific meaning depending on the context. For native OCaml, it usually refers to a C function with that name. For Melange, it refers to the functions or values that exist in the runtime JavaScript code, and will be used from Melange. Melange externals are always decorated with certain [@bs.xxx] attributes. These attributes are listed above , and will be further explain in the next sections. Once declared, one can use an external as a normal value. Melange external functions are turned into the expected JavaScript values, inlined into their callers during compilation, and completely erased afterwards. They don\u2019t appear in the JavaScript output, so there are no costs on bundling size. Note : it is recommended to use external functions and the [@bs.xxx] attributes in the interface files as well, as this allows some optimizations where the resulting JavaScript values can be directly inlined at the call sites. Special identity external One external worth mentioning is the following one: type foo = string type bar = int external danger_zone : foo -> bar = \"%identity\" This is a final escape hatch which does nothing but convert from the type foo to bar . In the following sections, if you ever fail to write an external , you can fall back to using this one. But try not to. Let\u2019s now see all the ways to use JavaScript from Melange. Abstract types In the examples below, you\u2019ll encounter type definitions where a type is declared without being assigned to anything, such as: type document These types are referred to as \"abstract types\" and are commonly used together with external functions that define operations over values when communicating with JavaScript. Abstract types enable defining types for specific values originating from JavaScript while omitting unnecessary details. An illustration is the document type mentioned earlier, which has several properties . By using abstract types, one can focus solely on the required aspects of the document value that the Melange program requires, rather than defining all its properties. Consider the following example: type document external document : document = \"document\" [@@bs.val] external set_title : document -> string -> unit = \"title\" [@@bs.set] Subsequent sections delve into the details of the bs.val and bs.set attributes. For a comprehensive understanding of abstract types and their usefulness, refer to the \"Encapsulation\" section of the OCaml Cornell textbook . Generate raw JavaScript It is possible to directly write JavaScript code from a Melange file. This is unsafe, but it can be useful for prototyping or as an escape hatch. To do it, we will use the bs.raw extension : let add = [%bs.raw {| function(a, b) { console.log(\"hello from raw JavaScript!\"); return a + b; } |}] let () = Js.log (add 1 2) The {||} strings are called \"quoted strings\" . They are similar to JavaScript\u2019s template literals, in the sense that they are multi-line, and there is no need to escape characters inside the string. Using one percentage sign ( [%bs.raw <string>] ) is useful to define expressions (function bodies, or other values) where the implementation is directly JavaScript. This is useful as we can attach the type signature already in the same line, to make our code safer. For example: [%%bs.raw \"var a = 1\"] let f : unit -> int = [%bs.raw \"function() {return 1}\"] Using two percentage signs ( [%%bs.raw <string>] ) is reserved for definitions in a structure or signature . For example: [%%bs.raw \"var a = 1\"] Debugger Melange allows to inject a debugger; expression using the bs.debugger extension: let f x y = [%bs.debugger]; x + y Output: function f (x,y) { debugger; // JavaScript developer tools will set a breakpoint and stop here x + y; } Detect global variables Melange provides a relatively type safe approach to use globals that might be defined either in the JavaScript runtime environment: bs.external . [%bs.external id] will check if the JavaScript value id is undefined or not, and return an Option.t value accordingly. For example: let () = match [%bs.external __DEV__] with | Some _ -> Js.log \"dev mode\" | None -> Js.log \"production mode\" Another example: let () = match [%bs.external __filename] with | Some f -> Js.log f | None -> Js.log \"non-node environment\" Bind to JavaScript objects JavaScript objects are used in a variety of use cases: As a fixed shape record . As a map or dictionary. As a class. As a module to import/export. Melange separates the binding methods for JavaScript objects based on these four use cases. This section documents the first three. Binding to JavaScript module objects is described in the \"Using functions from other JavaScript modules\" section. Objects with static shape (record-like) Using OCaml records If your JavaScript object has fixed fields, then it\u2019s conceptually like an OCaml record . Since Melange compiles records into JavaScript objects, the most common way to bind to JavaScript objects is using records. type person = { name : string; friends : string array; age : int; } external john : person = \"john\" [@@bs.module \"MySchool\"] let john_name = john.name This is the generated JavaScript: var MySchool = require(\"MySchool\"); var john_name = MySchool.john.name; External functions are documented in the \"Foreign function interface\" section. The bs.module attribute is documented here . If you want or need to use different field names on the Melange and the JavaScript sides, you can use the bs.as decorator: type action = { type_ : string [@bs.as \"type\"] } let action = { type_ = \"ADD_USER\" } Which generates the JavaScript code: var action = { type: \"ADD_USER\" }; This is useful to map to JavaScript attribute names that cannot be expressed in Melange, for example, where the JavaScript name we want to generate is a reserved keyword . It is also possible to map a Melange record to a JavaScript array by passing indices to the bs.as decorator: type t = { foo : int; [@bs.as \"0\"] bar : string; [@bs.as \"1\"] } let value = { foo = 7; bar = \"baz\" } And its JavaScript generated code: var value = [ 7, \"baz\" ]; Using Js.t objects Alternatively to records, Melange offers another type that can be used to produce JavaScript objects. This type is 'a Js.t , where 'a is an OCaml object . The advantage of objects versus records is that no type declaration is needed in advance, which can be helpful for prototyping or quickly generating JavaScript object literals. Melange provides some ways to create Js.t object values, as well as accessing the properties inside them. To create values, the [%bs.obj] extension is used, and the ## infix operator allows to read from the object properties: let john = [%bs.obj { name = \"john\"; age = 99 }] let t = john##name Which generates: var john = { name: \"john\", age: 99 }; var t = john.name; Note that object types allow for some flexibility that the record types do not have. For example, an object type can be coerced to another with fewer values or methods, while it is impossible to coerce a record type to another one with fewer fields. So different object types that share some methods can be mixed in a data structure where only their common methods are visible. To give an example, one can create a function that operates in all the object types that include a field name that is of type string, e.g.: let name_extended obj = obj##name ^ \" wayne\" let one = name_extended [%bs.obj { name = \"john\"; age = 99 }] let two = name_extended [%bs.obj { name = \"jane\"; address = \"1 infinite loop\" }] To read more about objects and polymorphism we recommend checking the OCaml docs or the OCaml manual . Bind to object properties If you need to bind only to the property of a JavaScript object, you can use bs.get and bs.set to access it using the dot notation . : (* Abstract type for the `document` value *) type document external document : document = \"document\" [@@bs.val] external set_title : document -> string -> unit = \"title\" [@@bs.set] external get_title : document -> string = \"title\" [@@bs.get] let current = get_title document let () = set_title document \"melange\" This generates: var current = document.title; document.title = \"melange\"; Alternatively, if some dynamism is required on the way the property is accessed, you can use bs.get_index and bs.set_index to access it using the bracket notation [] : type t external create : int -> t = \"Int32Array\" [@@bs.new] external get : t -> int -> int = \"get\" [@@bs.get_index] external set : t -> int -> int -> unit = \"set\" [@@bs.set_index] let () = let i32arr = (create 3) in set i32arr 0 42; Js.log (get i32arr 0) Which generates: var i32arr = new Int32Array(3); i32arr[0] = 42; console.log(i32arr[0]); Objects with dynamic shape (dictionary-like) Sometimes JavaScript objects are used as dictionaries. In these cases: All values stored in the object belong to the same type Key-value pairs can be added or removed at runtime For this particular use case of JavaScript objects, Melange exposes a specific type Js.Dict.t . The values and functions to work with values of this type are defined in the Js.Dict module, with operations like get , set , etc. Values of the type Js.Dict.t compile to JavaScript objects. JavaScript classes JavaScript classes are special kinds of objects. To interact with classes, Melange exposes bs.new to emulate e.g. new Date() : type t external create_date : unit -> t = \"Date\" [@@bs.new] let date = create_date () Which generates: var date = new Date(); You can chain bs.new and bs.module if the JavaScript class you want to work with is in a separate JavaScript module: type t external book : unit -> t = \"Book\" [@@bs.new] [@@bs.module] let myBook = book () Which generates: var Book = require(\"Book\"); var myBook = new Book(); Bind to global JavaScript functions or values Binding to a JavaScript function makes use of external , like with objects. If we want to bind to a function available globally, Melange offers the bs.val attribute: external imul : int -> int -> int = \"Math.imul\" [@@bs.val] Or for document : (* Abstract type for the `document` value *) type document external document : document = \"document\" [@@bs.val] Using functions from other JavaScript modules bs.module is like the bs.val attribute, but it accepts a string with the name of the module, or the relative path to it. external dirname : string -> string = \"dirname\" [@@bs.module \"path\"] let root = dirname \"/User/github\" Generates: var Path = require(\"path\"); var root = Path.dirname(\"/User/github\"); Labeled arguments OCaml has labeled arguments , which can also be optional, and work with external as well. Labeled arguments can be useful to provide more information about the arguments of a JavaScript function that is called from Melange. Let\u2019s say we have the following JavaScript function, that we want to call from Melange: // MyGame.js function draw(x, y, border) { // let\u2019s assume `border` is optional and defaults to false } draw(10, 20) draw(20, 20, true) When writing Melange bindings, we can add labeled arguments to make things more clear: external draw : x:int -> y:int -> ?border:bool -> unit -> unit = \"draw\" [@@module \"MyGame\"] let () = draw ~x:10 ~y:20 ~border:true () let () = draw ~x:10 ~y:20 () Generates: var MyGame = require(\"MyGame\"); MyGame.draw(10, 20, true); MyGame.draw(10, 20, undefined); The generated JavaScript function is the same, but now the usage in Melange is much clearer. Note : in this particular case, a final param of type unit, () must be added after border , since border is an optional argument at the last position. Not having the last param unit would lead to a warning, which is explained in detail in the OCaml documentation . Note that you can freely reorder the labeled arguments when applying the function on the Melange side. The generated code will maintain the original order that was used when declaring the function: external draw : x:int -> y:int -> ?border:bool -> unit -> unit = \"draw\" [@@module \"MyGame\"] let () = draw ~x:10 ~y:20 () let () = draw ~y:20 ~x:10 () Generates: var MyGame = require(\"MyGame\"); MyGame.draw(10, 20, undefined); MyGame.draw(10, 20, undefined); Calling an object method If we need to call a JavaScript method, Melange provides the attribute bs.send : (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : document -> string -> Dom.element = \"getElementById\" [@@bs.send] let el = get_by_id document \"my-id\" Generates: var el = document.getElementById(\"my-id\"); When using bs.send , the first argument will be the object that holds the property with the function we want to call. This combines well with the pipe first operator |. , see the \"Chaining\" section below. If we want to design our bindings to be used with OCaml pipe last operator |> , there is an alternate bs.send.pipe attribute. Let\u2019s rewrite the example above using it: (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : string -> Dom.element = \"getElementById\" [@@bs.send.pipe: document] let el = get_by_id \"my-id\" document Generates the same code as bs.send : var el = document.getElementById(\"my-id\"); Chaining It is common to find this kind of API in JavaScript: foo().bar().baz() . This kind of API can be designed with Melange externals. Depending on which convention we want to use, there are two attributes available: For a data-first convention, the bs.send attribute, in combination with the pipe first operator |. For a data-last convention, the bs.send.pipe attribute, in combination with OCaml pipe last operator |> . For further details about the differences in the conventions and the trade-offs, one can refer to this \"Data-first and data-last\" blog post . Let\u2019s see first an example of chaining using data-first convention with the pipe first operator |. : (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : document -> string -> Dom.element = \"getElementById\" [@@bs.send] external get_by_classname : Dom.element -> string -> Dom.element = \"getElementsByClassName\" [@@bs.send] let el = document |. get_by_id \"my-id\" |. get_by_classname \"my-class\" Will generate: var el = document.getElementById(\"my-id\").getElementsByClassName(\"my-class\"); Now with pipe last operator |> : (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : string -> Dom.element = \"getElementById\" [@@bs.send.pipe: document] external get_by_classname : string -> Dom.element = \"getElementsByClassName\" [@@bs.send.pipe: Dom.element] let el = document |> get_by_id \"my-id\" |> get_by_classname \"my-class\" Will generate the same JavaScript as the pipe first version: var el = document.getElementById(\"my-id\").getElementsByClassName(\"my-class\"); Variadic function arguments Sometimes JavaScript functions take an arbitrary amount of arguments. For these cases, Melange provides the bs.variadic attribute, which can be attached to the external declaration. However, there is one caveat: all the variadic arguments need to belong to the same type. external join : string array -> string = \"join\" [@@bs.module \"path\"] [@@bs.splice] let v = join [| \"a\"; \"b\" |] Generates: var Path = require(\"path\"); var v = Path.join(\"a\", \"b\"); If more dynamism is needed, there is a way to inject elements with different types in the array and still have Melange compile to JavaScript values that are not wrapped using the OCaml unboxed attribute, which is documented in a section below : type hide = Hide : 'a -> hide [@@unboxed] external join : hide array -> string = \"join\" [@@bs.module \"path\"] [@@bs.splice] let v = join [| Hide \"a\"; Hide 2 |] Compiles to: var Path = require(\"path\"); var v = Path.join(\"a\", 2); Bing to a polymorphic function Some JavaScript libraries will define functions where the arguments can vary on both type and shape. There are two approaches to bind to those, depending on how dynamic they are. Approach 1: Multiple external functions If it is possible to enumerate the many forms an overloaded JavaScript function can take, a flexible approach is to bind to each form individually: external drawCat : unit -> unit = \"draw\" [@@bs.module \"MyGame\"] external drawDog : giveName:string -> unit = \"draw\" [@@bs.module \"MyGame\"] external draw : string -> useRandomAnimal:bool -> unit = \"draw\" [@@bs.module \"MyGame\"] Note how all three externals bind to the same JavaScript function, draw . Approach 2: Polymorphic variant + bs.unwrap In some cases, the function has a constant number of arguments but the type of the argument can vary. For cases like this, we can model the argument as a variant and use the bs.unwrap attribute in the external. Let\u2019s say we want to bind to the following JavaScript function: function padLeft(value, padding) { if (typeof padding === \"number\") { return Array(padding + 1).join(\" \") + value; } if (typeof padding === \"string\") { return padding + value; } throw new Error(`Expected string or number, got '${padding}'.`); } As the padding argument can be either a number or a string, we can use bs.unwrap to define it. It is important to note that bs.unwrap imposes certain requirements on the type it is applied to: It needs to be a polymorphic variant Its definition needs to be inlined Each variant tag needs to have an argument The variant type can not be opened (can\u2019t use > ) external padLeft: string -> ([ `Str of string | `Int of int ] [@bs.unwrap]) -> string = \"padLeft\" [@@bs.val] let _ = padLeft \"Hello World\" (`Int 4) let _ = padLeft \"Hello World\" (`Str \"Message from Melange: \") Which produces the following JavaScript: padLeft(\"Hello World\", 4); padLeft(\"Hello World\", \"Message from Melange: \"); As we saw in the Non-shared data types section, we should rather avoid passing variants directly to the JavaScript side. By using bs.unwrap we get the best of both worlds: from Melange we can use variants, while JavaScript gets the raw values inside them. Using polymorphic variants to bind to enums Some JavaScript APIs take a limited subset of values as input. For example, Node\u2019s fs.readFileSync second argument can only take a few given string values: \"ascii\" , \"utf8\" , etc. Some other functions can take values from a few given integers, like the createStatusBarItem function in VS Code API, which can take an alignment parameter that can only be 1 or 2 . One could still type these parameters as just string or int , but this would not prevent consumers of the external function from calling it using values that are unsupported by the JavaScript function. Let\u2019s see how we can use polymorphic variants to avoid runtime errors. If the values are strings, we can use the bs.string attribute: external read_file_sync : name:string -> ([ `utf8 | `ascii ][@bs.string]) -> string = \"readFileSync\" [@@bs.module \"fs\"] let _ = read_file_sync ~name:\"xx.txt\" `ascii Which generates: var Fs = require(\"fs\"); Fs.readFileSync(\"xx.txt\", \"ascii\"); This technique can be combined with the bs.as attribute to modify the strings produced from the polymorphic variant values. For example: type document type style external document : document = \"document\" [@@bs.val] external get_by_id : document -> string -> Dom.element = \"getElementById\" [@@bs.send] external style : Dom.element -> style = \"style\" [@@bs.get] external transition_timing_function : style -> [ `ease | `easeIn [@bs.as \"ease-in\"] | `easeOut [@bs.as \"ease-out\"] | `easeInOut [@bs.as \"ease-in-out\"] | `linear ] -> unit = \"transitionTimingFunction\" [@@bs.set] let element_style = style (get_by_id document \"my-id\") let () = transition_timing_function element_style `easeIn This will generate: var element_style = document.getElementById(\"my-id\").style; element_style.transitionTimingFunction = \"ease-in\"; Aside from producing string values, Melange also offers bs.int to produce integer values. bs.int can also be combined with bs.as : external test_int_type : ([ `on_closed | `on_open [@bs.as 20] | `in_bin ][@bs.int]) -> int = \"testIntType\" [@@bs.val] let value = test_int_type `on_open In this example, on_closed will be encoded as 0, on_open will be 20 due to the attribute bs.as and in_bin will be 21, because if no bs.as annotation is provided for a variant tag, the compiler continues assigning values counting up from the previous one. This code generates: var value = testIntType(20); Using polymorphic variants to bind to event listeners Polymorphic variants can also be used to wrap event listeners, or any other kind of callback, for example: type readline external on : readline -> ([ `close of unit -> unit | `line of string -> unit ][@bs.string]) -> readline = \"on\" [@@bs.send] let register rl = rl |. on (`close (fun event -> ())) |. on (`line (fun line -> Js.log line)) This generates: function register(rl) { return rl .on(\"close\", function($$event) {}) .on(\"line\", function(line) { console.log(line); }); } Constant values as arguments Sometimes we want to call a JavaScript function and make sure one of the arguments is always constant. For this, the [@bs.as] attribute can be combined with the wildcard pattern _ : external process_on_exit : (_[@bs.as \"exit\"]) -> (int -> unit) -> unit = \"process.on\" [@@bs.val] let () = process_on_exit (fun exit_code -> Js.log (\"error code: \" ^ string_of_int exit_code)) This generates: process.on(\"exit\", function (exitCode) { console.log(\"error code: \" + exitCode.toString()); }); The bs.as \"exit\" and the wildcard _ pattern together will tell Melange to compile the first argument of the JavaScript function to the string \"exit\" . You can also use any JSON literal by passing a quoted string to bs.as : bs.as {json|true|json} or bs.as {json|{\"name\": \"John\"}|json} . Binding to callbacks In OCaml, all functions have arity 1. This means that if you define a function like this: let add x y = x + y Its type will be int -> int -> int . This means that one can partially apply add by calling add 1 , which will return another function expecting the second argument of the addition. This kind of functions are called \"curried\" functions, more information about currying in OCaml can be found in this chapter of the \"OCaml Programming: Correct + Efficient + Beautiful\" book. This is incompatible with how function calling conventions work in JavaScript, where all function calls always apply all the arguments. To continue the example, let\u2019s say we have an add function implemented in JavaScript, similar to the one above: var add = function (a, b) { return a + b; }; If we call add(1) , the function will be totally applied, with b having undefined value. And as JavaScript will try to add 1 with undefined , we will get NaN as a result. To illustrate this difference and how it affects Melange bindings, let\u2019s say we want to write bindings for a JavaScript function like this: function map (a, b, f){ var i = Math.min(a.length, b.length); var c = new Array(i); for(var j = 0; j < i; ++j){ c[j] = f(a[i],b[i]) } return c ; } A naive external function declaration could be as below: external map : 'a array -> 'b array -> ('a -> 'b -> 'c) -> 'c array = \"map\" [@@bs.val] Unfortunately, this is not completely correct. The issue is in the callback function, with type 'a -> 'b -> 'c . This means that map will expect a function like add described above. But as we said, in OCaml, having two arguments means just to have two functions that take one argument. Let\u2019s rewrite add to make the problem a bit more clear: let add x = let partial y = x + y in partial This will be compiled to: function add(x) { return (function (y) { return x + y | 0; }); } Now if we ever used our external function map with our add function by calling map arr1 arr2 add it would not work as expected. JavaScript function application does not work the same as in OCaml, so the function call in the map implementation, f(a[i],b[i]) , would be applied over the outer JavaScript function add , which only takes one argument x , and b[i] would be just discarded. The value returned from the operation would not be the addition of the two numbers, but rather the inner anonymous callback. To solve this mismatch between OCaml and JavaScript functions and their application, Melange provides a special attribute @bs that can be used with external functions. In the example above: external map : 'a array -> 'b array -> (('a -> 'b -> 'c)[@bs]) -> 'c array = \"map\" [@@bs.val] Here ('a -> 'b -> 'c [@bs]) will be interpreted as having arity 2, in general, 'a0 -> 'a1 ...\u200b 'aN -> 'b0 [@bs] is the same as 'a0 -> 'a1 ...\u200b 'aN -> 'b0 except the former\u2019s arity is guaranteed to be N while the latter is unknown. If we try now to call map using add : let add x y = x + y let _ = map [||] [||] add We will get an error: let _ = map [||] [||] add ^^^ This expression has type int -> int -> int but an expression was expected of type ('a -> 'b -> 'c) Js.Fn.arity2 To solve this, we add @bs in the function definition as well: let add = fun [@bs] x y -> x + y Annotating function definitions can be quite cumbersome when writing a lot of externals. To work around the verbosity, Melange offers another attribute called bs.uncurry . Let\u2019s see how we could use it in the previous example. We just need to replace bs with bs.uncurry : external map : 'a array -> 'b array -> (('a -> 'b -> 'c)[@bs.uncurry]) -> 'c array = \"map\" [@@bs.val] Now if we try to call map with a regular add function: let add x y = x + y let _ = map [||] [||] add Everything works fine now, without having to attach any attributes to add . The main difference between bs and bs.uncurry is that the latter only works with externals. bs.uncurry is the recommended option to use for bindings, while bs remains useful for those use cases where performance is crucial and we want the JavaScript functions generated from OCaml ones to not be applied partially. Modeling this -based Callbacks Many JavaScript libraries have callbacks which rely on the this keyword , for example: x.onload = function(v) { console.log(this.response + v) } Inside the x.onload callback, this would be pointing to x . It would not be correct to declare x.onload of type unit -> unit . Instead, Melange introduces a special attribute, bs.this , which allows to type x as this: type x external x : x = \"x\" [@@bs.val] external set_onload : x -> ((x -> int -> unit)[@bs.this]) -> unit = \"onload\" [@@bs.set] external resp : x -> int = \"response\" [@@bs.get] let _ = set_onload x begin fun [@bs.this] o v -> Js.log (resp o + v) end Which generates: x.onload = function (v) { var o = this; console.log((o.response + v) | 0); }; Note that the first argument will be reserved for this . Wrapping returned nullable values For JavaScript functions that return a value that can be undefined or null , Melange provides bs.return . Using this attribute will have Melange generated code automatically convert the value returned by the function to an option type that can be used safely from Melange side, avoiding the need to use manual conversion functions like Js.Nullable.toOption and such. type element type document external get_by_id : document -> string -> element option = \"getElementById\" [@@bs.send] [@@bs.return nullable] let test document = let elem = get_by_id document \"header\" in match elem with | None -> 1 | Some _element -> 2 Which generates: function test($$document) { var elem = $$document.getElementById(\"header\"); if (elem == null) { return 1; } else { return 2; } } The bs.return attribute takes an attribute payload, as seen with [@@bs.return nullable] above. Currently 4 directives are supported: null_to_opt , undefined_to_opt , nullable and identity . nullable is encouraged, as it will convert from null and undefined to option type. identity will make sure that compiler will do nothing about the returned value. It is rarely used, but introduced here for debugging purposes.","title":"Communicate with JavaScript"},{"location":"communicate-with-javascript/#communicate-with-javascript","text":"Melange interoperates very well with JavaScript, and provides a wide array of features to consume foreign JavaScript code. To learn about these techniques, we will first map the OCaml type system to JavaScript runtime types, then we will see the OCaml language extensions that allow these techniques to exist. Finally, we will provide a variety of use cases with examples to show how to communicate to and from JavaScript.","title":"Communicate with JavaScript"},{"location":"communicate-with-javascript/#data-types-and-runtime-representation","text":"This is how each Melange type is converted into JavaScript values: Melange JavaScript int number nativeint number int32 number float number string string array array tuple (3, 4) array [3, 4] bool boolean Js.Nullable.t null / undefined Option.t None undefined Option.t Some( Some .. Some (None)) internal representation Option.t Some 2 2 record {x: 1; y: 2} object {x: 1, y: 2} int64 array of 2 elements [high, low] high is signed, low unsigned char 'a' -> 97 (ascii code) bytes number array list [] 0 list [x, y] { hd: x, tl: { hd: y, tl: 0 } } list [1, 2, 3] { hd: 1, tl: { hd: 2, tl: { hd: 3, tl: 0 } } } variant See below polymorphic variant See below Variants with a single non-nullary constructor: type tree = Leaf | Node of int * tree * tree (* Leaf -> 0 *) (* Node(7, Leaf, Leaf) -> { _0: 7, _1: 0, _2: 0 } *) Variants with more than one non-nullary constructor: type t = A of string | B of int (* A(\"foo\") -> { TAG: 0, _0: \"Foo\" } *) (* B(2) -> { TAG: 1, _0: 2 } *) Polymorphic variants: let u = `Foo (* \"Foo\" *) let v = `Foo(2) (* { NAME: \"Foo\", VAL: \"2\" } *) Let\u2019s see now some of these types in detail. We will first describe the shared types , which have a transparent representation as JavaScript values, and then go through the non-shared types , that have more complex runtime representations. NOTE: Relying on the non-shared data types runtime representations by reading or writing them manually from JavaScript code that communicates with Melange code might lead to runtime errors, as these representations might change in the future.","title":"Data types and runtime representation"},{"location":"communicate-with-javascript/#shared-types","text":"The following are types that can be shared between Melange and JavaScript almost \"as is\". Specific caveats are mentioned on the sections where they apply.","title":"Shared types"},{"location":"communicate-with-javascript/#strings","text":"JavaScript strings are immutable sequences of UTF-16 encoded Unicode text. OCaml strings are immutable sequences of bytes and nowadays assumed to be UTF-8 encoded text when interpreted as textual content. This is problematic when interacting with JavaScript code, because if one tries to use some unicode characters, like: let () = Js.log \"\u4f60\u597d\" It will lead to some cryptic console output. To rectify this, Melange allows to define quoted string literals using the js identifier, for example: let () = Js.log {js|\u4f60\u597d\uff0c \u4e16\u754c|js} For convenience, Melange exposes another special quoted string identifier: j . It is similar to JavaScript\u2019 string interpolation, but for variables only (not arbitrary expressions): let world = {j|\u4e16\u754c|j} let helloWorld = {j|\u4f60\u597d\uff0c$world|j} You can surround the interpolation variable in parentheses too: {j|\u4f60 \u597d\uff0c$(world)|j} . To work with strings, the Melange standard library provides some utilities in the Stdlib.String module . The bindings to the native JavaScript functions to work with strings are in the Js.String module .","title":"Strings"},{"location":"communicate-with-javascript/#floating-point-numbers","text":"OCaml floats are IEEE 754 with a 53-bit mantissa and exponents from -1022 to 1023. This happens to be the same encoding as JavaScript numbers , so values of these types can be used transparently between Melange code and JavaScript code. The Melange standard library provides a Stdlib.Float module . The bindings to the JavaScript APIs that manipulate float values can be found in the Js.Float module.","title":"Floating-point numbers"},{"location":"communicate-with-javascript/#integers","text":"In Melange, integers are limited to 32 bits due to the fixed-width conversion of bitwise operations in JavaScript. While Melange integers compile to JavaScript numbers, treating them interchangeably can result in unexpected behavior due to differences in precision. Even though bitwise operations in JavaScript are constrained to 32 bits, integers themselves are represented using the same floating-point format as numbers , allowing for a larger range of representable integers in JavaScript compared to Melange. When dealing with large numbers, it is advisable to use floats instead. For instance, floats are used in bindings like Js.Date . The Melange standard library provides a Stdlib.Int module . The bindings to work with JavaScript integers are in the Js.Int module.","title":"Integers"},{"location":"communicate-with-javascript/#arrays","text":"Melange arrays compile to JavaScript arrays. But note that unlike JavaScript arrays, all the values in a Melange array need to have the same type. Another difference is that OCaml arrays are fixed-sized, but on Melange side this constraint is relaxed. You can change an array\u2019s length using functions like Js.Array.push , available in the bindings to the JavaScript APIs in Js.Array . Melange standard library also has a module to work with arrays, available in Stdlib.Array (todo-fix-me.md) module.","title":"Arrays"},{"location":"communicate-with-javascript/#tuples","text":"OCaml tuples are compiled to JavaScript arrays. This is convenient when writing bindings that will use a JavaScript array with heterogeneous values, but that happens to have a fixed length. As a real world example of this can be found in ReasonReact , the Melange bindings for React . In these bindings, component effects dependencies are represented as OCaml tuples, so they get compiled cleanly to JavaScript arrays by Melange. For example, some code like this: let () = React.useEffect2 (fun () -> None) (foo, bar) Will produce: React.useEffect(function () {}, [foo, bar]);","title":"Tuples"},{"location":"communicate-with-javascript/#booleans","text":"Values of type bool compile to JavaScript booleans.","title":"Booleans"},{"location":"communicate-with-javascript/#records","text":"Melange records map directly to JavaScript objects. If the record fields include non-shared data types (like variants), these values should be transformed separately, and not be directly used in JavaScript. Extensive documentation about interfacing with JavaScript objects using records can be found in the section below .","title":"Records"},{"location":"communicate-with-javascript/#non-shared-data-types","text":"The following types differ too much between Melange and JavaScript, so while they can always be manipulated from JavaScript, it is recommended to transform them before doing so. Variants and polymorphic variants: Better transform them into readable JavaScript values before manipulating them from JavaScript, Melange provides some helpers to do so. Exceptions Option (a variant type): Better use the Js.Nullable.fromOption and Js.Nullable.toOption functions in the Js.Nullable module to transform them into either null or undefined values. List (also a variant type): use Array.of_list and Array.to_list in the Array module . Character Int64 Lazy values","title":"Non-shared data types"},{"location":"communicate-with-javascript/#language-extensions","text":"In order to interact with JavaScript, Melange needs to extend the language to provide blocks that express these interactions. One approach could be to introduce new syntactic constructs (keywords and such) to do so, for example: javascript add : int -> int -> int = {|function(x,y){ return x + y }|} But this would break compatibility with OCaml, which is one of the main goals of Melange. Fortunately, OCaml provides mechanisms to extend its language without breaking compatibility with the parser or the language. These mechanisms are composed by two parts: - First, some syntax additions to define parts of the code that will be extended or replaced - Second, compile-time OCaml native programs called PPX rewriters , that will read the syntax additions defined above and proceed to extend or replace them The syntax additions come in two flavors, called extensions nodes and attributes . Extension nodes are blocks that are supposed to be replaced by a specific type of PPX rewriters called extenders. Extension nodes use the % character to be identified. Extenders will take the extension node and replace it with a valid OCaml AST (abstract syntax tree). An example where Melange uses extensions to communicate with JavaScript is to produce \"raw\" JavaScript inside a Melange program: [%%bs.raw \"var a = 1; var b = 2\"] let add = [%bs.raw \"a + b\"] Which will generate the following JavaScript code: var a = 1; var b = 2 var add = a + b The difference between one and two % characters is detailed in the OCaml documentation . Attributes are \"decorations\" applied to specific parts of the code to provide additional information. Melange uses attributes in various ways to enhance communication with JavaScript code. For instance, it introduces the bs.as attribute, which allows renaming of fields in a record on the generated JavaScript code: type t = { foo : int; [@bs.as \"foo_for_js\"] bar : string; } let t = { foo = 2; bar = \"b\" } This will generate the following JavaScript code: var t = { foo_for_js: 2, bar: \"b\" }; To learn more about preprocessors, attributes and extension nodes, check the section about PPX rewriters in the OCaml docs.","title":"Language extensions"},{"location":"communicate-with-javascript/#list-of-attributes-and-extensions","text":"NOTE: All these attributes and extensions are prefixed with bs. for backwards compatibility. They will be updated to mel. in the future. Attributes: These attributes are used to annotate external definitions: bs.get : read JavaScript object properties statically by name, using the dot notation . bs.get_index : read a JavaScript object\u2019s properties dynamically by using the bracket notation [] bs.module : bind to a value from a JavaScript module bs.new : bind to a JavaScript class constructor bs.obj : create JavaScript object bs.return : automate conversion from nullable values to Option.t values bs.send : call a JavaScript object method using pipe first convention bs.send.pipe : call a JavaScript object method using pipe last convention bs.set : set JavaScript object properties statically by name, using the dot notation . bs.set_index : set JavaScript object properties dynamically by using the bracket notation [] bs.scope : reach to deeper properties inside a JavaScript object bs.val : bind to global JavaScript functions or other values bs.variadic : bind to a function taking variadic arguments from an array These attributes are used to annotate arguments in external definitions: bs : define function arguments as uncurried (manual) bs.int : compile function argument to an int bs.string : compile function argument to a string bs.this : bind to this based callbacks bs.uncurry : define function arguments as uncurried (automated) bs.unwrap : unwrap variant values These attributes are used in other places like records, fields, parameters, functions...: bs.as : redefine the name generated in the JavaScript output code. Used in constant function arguments , variants , polymorphic variants and record fields . bs.deriving : generate getters and setters for some types bs.inline : forcefully inline constant values bs.optional : omit fields in a record (combines with bs.deriving ) Extensions: In order to use any of these extensions, you will have to add the melange PPX preprocessor to your project. To do so, add the following to the dune file: (library (name lib) (modes melange) (preprocess (pps melange.ppx))) The same field preprocess can be added to melange.emit . Here is the list of all extensions supported by Melange: bs.debugger : insert debugger statements bs.external : read global values bs.obj : create JavaScript object literals bs.raw : write raw JavaScript code bs.re : insert regular expressions","title":"List of attributes and extensions"},{"location":"communicate-with-javascript/#foreign-function-interface","text":"Most of the system that Melange exposes to communicate with JavaScript is built on top of an OCaml language construct called external . external is a keyword for declaring a value in OCaml that will interface with C code : external my_c_function : int -> string = \"someCFunctionName\" It is like a let binding, except that the body of an external is a string. That string has a specific meaning depending on the context. For native OCaml, it usually refers to a C function with that name. For Melange, it refers to the functions or values that exist in the runtime JavaScript code, and will be used from Melange. Melange externals are always decorated with certain [@bs.xxx] attributes. These attributes are listed above , and will be further explain in the next sections. Once declared, one can use an external as a normal value. Melange external functions are turned into the expected JavaScript values, inlined into their callers during compilation, and completely erased afterwards. They don\u2019t appear in the JavaScript output, so there are no costs on bundling size. Note : it is recommended to use external functions and the [@bs.xxx] attributes in the interface files as well, as this allows some optimizations where the resulting JavaScript values can be directly inlined at the call sites.","title":"Foreign function interface"},{"location":"communicate-with-javascript/#special-identity-external","text":"One external worth mentioning is the following one: type foo = string type bar = int external danger_zone : foo -> bar = \"%identity\" This is a final escape hatch which does nothing but convert from the type foo to bar . In the following sections, if you ever fail to write an external , you can fall back to using this one. But try not to. Let\u2019s now see all the ways to use JavaScript from Melange.","title":"Special identity external"},{"location":"communicate-with-javascript/#abstract-types","text":"In the examples below, you\u2019ll encounter type definitions where a type is declared without being assigned to anything, such as: type document These types are referred to as \"abstract types\" and are commonly used together with external functions that define operations over values when communicating with JavaScript. Abstract types enable defining types for specific values originating from JavaScript while omitting unnecessary details. An illustration is the document type mentioned earlier, which has several properties . By using abstract types, one can focus solely on the required aspects of the document value that the Melange program requires, rather than defining all its properties. Consider the following example: type document external document : document = \"document\" [@@bs.val] external set_title : document -> string -> unit = \"title\" [@@bs.set] Subsequent sections delve into the details of the bs.val and bs.set attributes. For a comprehensive understanding of abstract types and their usefulness, refer to the \"Encapsulation\" section of the OCaml Cornell textbook .","title":"Abstract types"},{"location":"communicate-with-javascript/#generate-raw-javascript","text":"It is possible to directly write JavaScript code from a Melange file. This is unsafe, but it can be useful for prototyping or as an escape hatch. To do it, we will use the bs.raw extension : let add = [%bs.raw {| function(a, b) { console.log(\"hello from raw JavaScript!\"); return a + b; } |}] let () = Js.log (add 1 2) The {||} strings are called \"quoted strings\" . They are similar to JavaScript\u2019s template literals, in the sense that they are multi-line, and there is no need to escape characters inside the string. Using one percentage sign ( [%bs.raw <string>] ) is useful to define expressions (function bodies, or other values) where the implementation is directly JavaScript. This is useful as we can attach the type signature already in the same line, to make our code safer. For example: [%%bs.raw \"var a = 1\"] let f : unit -> int = [%bs.raw \"function() {return 1}\"] Using two percentage signs ( [%%bs.raw <string>] ) is reserved for definitions in a structure or signature . For example: [%%bs.raw \"var a = 1\"]","title":"Generate raw JavaScript"},{"location":"communicate-with-javascript/#debugger","text":"Melange allows to inject a debugger; expression using the bs.debugger extension: let f x y = [%bs.debugger]; x + y Output: function f (x,y) { debugger; // JavaScript developer tools will set a breakpoint and stop here x + y; }","title":"Debugger"},{"location":"communicate-with-javascript/#detect-global-variables","text":"Melange provides a relatively type safe approach to use globals that might be defined either in the JavaScript runtime environment: bs.external . [%bs.external id] will check if the JavaScript value id is undefined or not, and return an Option.t value accordingly. For example: let () = match [%bs.external __DEV__] with | Some _ -> Js.log \"dev mode\" | None -> Js.log \"production mode\" Another example: let () = match [%bs.external __filename] with | Some f -> Js.log f | None -> Js.log \"non-node environment\"","title":"Detect global variables"},{"location":"communicate-with-javascript/#bind-to-javascript-objects","text":"JavaScript objects are used in a variety of use cases: As a fixed shape record . As a map or dictionary. As a class. As a module to import/export. Melange separates the binding methods for JavaScript objects based on these four use cases. This section documents the first three. Binding to JavaScript module objects is described in the \"Using functions from other JavaScript modules\" section.","title":"Bind to JavaScript objects"},{"location":"communicate-with-javascript/#objects-with-static-shape-record-like","text":"","title":"Objects with static shape (record-like)"},{"location":"communicate-with-javascript/#using-ocaml-records","text":"If your JavaScript object has fixed fields, then it\u2019s conceptually like an OCaml record . Since Melange compiles records into JavaScript objects, the most common way to bind to JavaScript objects is using records. type person = { name : string; friends : string array; age : int; } external john : person = \"john\" [@@bs.module \"MySchool\"] let john_name = john.name This is the generated JavaScript: var MySchool = require(\"MySchool\"); var john_name = MySchool.john.name; External functions are documented in the \"Foreign function interface\" section. The bs.module attribute is documented here . If you want or need to use different field names on the Melange and the JavaScript sides, you can use the bs.as decorator: type action = { type_ : string [@bs.as \"type\"] } let action = { type_ = \"ADD_USER\" } Which generates the JavaScript code: var action = { type: \"ADD_USER\" }; This is useful to map to JavaScript attribute names that cannot be expressed in Melange, for example, where the JavaScript name we want to generate is a reserved keyword . It is also possible to map a Melange record to a JavaScript array by passing indices to the bs.as decorator: type t = { foo : int; [@bs.as \"0\"] bar : string; [@bs.as \"1\"] } let value = { foo = 7; bar = \"baz\" } And its JavaScript generated code: var value = [ 7, \"baz\" ];","title":"Using OCaml records"},{"location":"communicate-with-javascript/#using-jst-objects","text":"Alternatively to records, Melange offers another type that can be used to produce JavaScript objects. This type is 'a Js.t , where 'a is an OCaml object . The advantage of objects versus records is that no type declaration is needed in advance, which can be helpful for prototyping or quickly generating JavaScript object literals. Melange provides some ways to create Js.t object values, as well as accessing the properties inside them. To create values, the [%bs.obj] extension is used, and the ## infix operator allows to read from the object properties: let john = [%bs.obj { name = \"john\"; age = 99 }] let t = john##name Which generates: var john = { name: \"john\", age: 99 }; var t = john.name; Note that object types allow for some flexibility that the record types do not have. For example, an object type can be coerced to another with fewer values or methods, while it is impossible to coerce a record type to another one with fewer fields. So different object types that share some methods can be mixed in a data structure where only their common methods are visible. To give an example, one can create a function that operates in all the object types that include a field name that is of type string, e.g.: let name_extended obj = obj##name ^ \" wayne\" let one = name_extended [%bs.obj { name = \"john\"; age = 99 }] let two = name_extended [%bs.obj { name = \"jane\"; address = \"1 infinite loop\" }] To read more about objects and polymorphism we recommend checking the OCaml docs or the OCaml manual .","title":"Using Js.t objects"},{"location":"communicate-with-javascript/#bind-to-object-properties","text":"If you need to bind only to the property of a JavaScript object, you can use bs.get and bs.set to access it using the dot notation . : (* Abstract type for the `document` value *) type document external document : document = \"document\" [@@bs.val] external set_title : document -> string -> unit = \"title\" [@@bs.set] external get_title : document -> string = \"title\" [@@bs.get] let current = get_title document let () = set_title document \"melange\" This generates: var current = document.title; document.title = \"melange\"; Alternatively, if some dynamism is required on the way the property is accessed, you can use bs.get_index and bs.set_index to access it using the bracket notation [] : type t external create : int -> t = \"Int32Array\" [@@bs.new] external get : t -> int -> int = \"get\" [@@bs.get_index] external set : t -> int -> int -> unit = \"set\" [@@bs.set_index] let () = let i32arr = (create 3) in set i32arr 0 42; Js.log (get i32arr 0) Which generates: var i32arr = new Int32Array(3); i32arr[0] = 42; console.log(i32arr[0]);","title":"Bind to object properties"},{"location":"communicate-with-javascript/#objects-with-dynamic-shape-dictionary-like","text":"Sometimes JavaScript objects are used as dictionaries. In these cases: All values stored in the object belong to the same type Key-value pairs can be added or removed at runtime For this particular use case of JavaScript objects, Melange exposes a specific type Js.Dict.t . The values and functions to work with values of this type are defined in the Js.Dict module, with operations like get , set , etc. Values of the type Js.Dict.t compile to JavaScript objects.","title":"Objects with dynamic shape (dictionary-like)"},{"location":"communicate-with-javascript/#javascript-classes","text":"JavaScript classes are special kinds of objects. To interact with classes, Melange exposes bs.new to emulate e.g. new Date() : type t external create_date : unit -> t = \"Date\" [@@bs.new] let date = create_date () Which generates: var date = new Date(); You can chain bs.new and bs.module if the JavaScript class you want to work with is in a separate JavaScript module: type t external book : unit -> t = \"Book\" [@@bs.new] [@@bs.module] let myBook = book () Which generates: var Book = require(\"Book\"); var myBook = new Book();","title":"JavaScript classes"},{"location":"communicate-with-javascript/#bind-to-global-javascript-functions-or-values","text":"Binding to a JavaScript function makes use of external , like with objects. If we want to bind to a function available globally, Melange offers the bs.val attribute: external imul : int -> int -> int = \"Math.imul\" [@@bs.val] Or for document : (* Abstract type for the `document` value *) type document external document : document = \"document\" [@@bs.val]","title":"Bind to global JavaScript functions or values"},{"location":"communicate-with-javascript/#using-functions-from-other-javascript-modules","text":"bs.module is like the bs.val attribute, but it accepts a string with the name of the module, or the relative path to it. external dirname : string -> string = \"dirname\" [@@bs.module \"path\"] let root = dirname \"/User/github\" Generates: var Path = require(\"path\"); var root = Path.dirname(\"/User/github\");","title":"Using functions from other JavaScript modules"},{"location":"communicate-with-javascript/#labeled-arguments","text":"OCaml has labeled arguments , which can also be optional, and work with external as well. Labeled arguments can be useful to provide more information about the arguments of a JavaScript function that is called from Melange. Let\u2019s say we have the following JavaScript function, that we want to call from Melange: // MyGame.js function draw(x, y, border) { // let\u2019s assume `border` is optional and defaults to false } draw(10, 20) draw(20, 20, true) When writing Melange bindings, we can add labeled arguments to make things more clear: external draw : x:int -> y:int -> ?border:bool -> unit -> unit = \"draw\" [@@module \"MyGame\"] let () = draw ~x:10 ~y:20 ~border:true () let () = draw ~x:10 ~y:20 () Generates: var MyGame = require(\"MyGame\"); MyGame.draw(10, 20, true); MyGame.draw(10, 20, undefined); The generated JavaScript function is the same, but now the usage in Melange is much clearer. Note : in this particular case, a final param of type unit, () must be added after border , since border is an optional argument at the last position. Not having the last param unit would lead to a warning, which is explained in detail in the OCaml documentation . Note that you can freely reorder the labeled arguments when applying the function on the Melange side. The generated code will maintain the original order that was used when declaring the function: external draw : x:int -> y:int -> ?border:bool -> unit -> unit = \"draw\" [@@module \"MyGame\"] let () = draw ~x:10 ~y:20 () let () = draw ~y:20 ~x:10 () Generates: var MyGame = require(\"MyGame\"); MyGame.draw(10, 20, undefined); MyGame.draw(10, 20, undefined);","title":"Labeled arguments"},{"location":"communicate-with-javascript/#calling-an-object-method","text":"If we need to call a JavaScript method, Melange provides the attribute bs.send : (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : document -> string -> Dom.element = \"getElementById\" [@@bs.send] let el = get_by_id document \"my-id\" Generates: var el = document.getElementById(\"my-id\"); When using bs.send , the first argument will be the object that holds the property with the function we want to call. This combines well with the pipe first operator |. , see the \"Chaining\" section below. If we want to design our bindings to be used with OCaml pipe last operator |> , there is an alternate bs.send.pipe attribute. Let\u2019s rewrite the example above using it: (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : string -> Dom.element = \"getElementById\" [@@bs.send.pipe: document] let el = get_by_id \"my-id\" document Generates the same code as bs.send : var el = document.getElementById(\"my-id\");","title":"Calling an object method"},{"location":"communicate-with-javascript/#chaining","text":"It is common to find this kind of API in JavaScript: foo().bar().baz() . This kind of API can be designed with Melange externals. Depending on which convention we want to use, there are two attributes available: For a data-first convention, the bs.send attribute, in combination with the pipe first operator |. For a data-last convention, the bs.send.pipe attribute, in combination with OCaml pipe last operator |> . For further details about the differences in the conventions and the trade-offs, one can refer to this \"Data-first and data-last\" blog post . Let\u2019s see first an example of chaining using data-first convention with the pipe first operator |. : (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : document -> string -> Dom.element = \"getElementById\" [@@bs.send] external get_by_classname : Dom.element -> string -> Dom.element = \"getElementsByClassName\" [@@bs.send] let el = document |. get_by_id \"my-id\" |. get_by_classname \"my-class\" Will generate: var el = document.getElementById(\"my-id\").getElementsByClassName(\"my-class\"); Now with pipe last operator |> : (* Abstract type for the `document` global *) type document external document : document = \"document\" [@@bs.val] external get_by_id : string -> Dom.element = \"getElementById\" [@@bs.send.pipe: document] external get_by_classname : string -> Dom.element = \"getElementsByClassName\" [@@bs.send.pipe: Dom.element] let el = document |> get_by_id \"my-id\" |> get_by_classname \"my-class\" Will generate the same JavaScript as the pipe first version: var el = document.getElementById(\"my-id\").getElementsByClassName(\"my-class\");","title":"Chaining"},{"location":"communicate-with-javascript/#variadic-function-arguments","text":"Sometimes JavaScript functions take an arbitrary amount of arguments. For these cases, Melange provides the bs.variadic attribute, which can be attached to the external declaration. However, there is one caveat: all the variadic arguments need to belong to the same type. external join : string array -> string = \"join\" [@@bs.module \"path\"] [@@bs.splice] let v = join [| \"a\"; \"b\" |] Generates: var Path = require(\"path\"); var v = Path.join(\"a\", \"b\"); If more dynamism is needed, there is a way to inject elements with different types in the array and still have Melange compile to JavaScript values that are not wrapped using the OCaml unboxed attribute, which is documented in a section below : type hide = Hide : 'a -> hide [@@unboxed] external join : hide array -> string = \"join\" [@@bs.module \"path\"] [@@bs.splice] let v = join [| Hide \"a\"; Hide 2 |] Compiles to: var Path = require(\"path\"); var v = Path.join(\"a\", 2);","title":"Variadic function arguments"},{"location":"communicate-with-javascript/#bing-to-a-polymorphic-function","text":"Some JavaScript libraries will define functions where the arguments can vary on both type and shape. There are two approaches to bind to those, depending on how dynamic they are.","title":"Bing to a polymorphic function"},{"location":"communicate-with-javascript/#approach-1-multiple-external-functions","text":"If it is possible to enumerate the many forms an overloaded JavaScript function can take, a flexible approach is to bind to each form individually: external drawCat : unit -> unit = \"draw\" [@@bs.module \"MyGame\"] external drawDog : giveName:string -> unit = \"draw\" [@@bs.module \"MyGame\"] external draw : string -> useRandomAnimal:bool -> unit = \"draw\" [@@bs.module \"MyGame\"] Note how all three externals bind to the same JavaScript function, draw .","title":"Approach 1: Multiple external functions"},{"location":"communicate-with-javascript/#approach-2-polymorphic-variant-bsunwrap","text":"In some cases, the function has a constant number of arguments but the type of the argument can vary. For cases like this, we can model the argument as a variant and use the bs.unwrap attribute in the external. Let\u2019s say we want to bind to the following JavaScript function: function padLeft(value, padding) { if (typeof padding === \"number\") { return Array(padding + 1).join(\" \") + value; } if (typeof padding === \"string\") { return padding + value; } throw new Error(`Expected string or number, got '${padding}'.`); } As the padding argument can be either a number or a string, we can use bs.unwrap to define it. It is important to note that bs.unwrap imposes certain requirements on the type it is applied to: It needs to be a polymorphic variant Its definition needs to be inlined Each variant tag needs to have an argument The variant type can not be opened (can\u2019t use > ) external padLeft: string -> ([ `Str of string | `Int of int ] [@bs.unwrap]) -> string = \"padLeft\" [@@bs.val] let _ = padLeft \"Hello World\" (`Int 4) let _ = padLeft \"Hello World\" (`Str \"Message from Melange: \") Which produces the following JavaScript: padLeft(\"Hello World\", 4); padLeft(\"Hello World\", \"Message from Melange: \"); As we saw in the Non-shared data types section, we should rather avoid passing variants directly to the JavaScript side. By using bs.unwrap we get the best of both worlds: from Melange we can use variants, while JavaScript gets the raw values inside them.","title":"Approach 2: Polymorphic variant + bs.unwrap"},{"location":"communicate-with-javascript/#using-polymorphic-variants-to-bind-to-enums","text":"Some JavaScript APIs take a limited subset of values as input. For example, Node\u2019s fs.readFileSync second argument can only take a few given string values: \"ascii\" , \"utf8\" , etc. Some other functions can take values from a few given integers, like the createStatusBarItem function in VS Code API, which can take an alignment parameter that can only be 1 or 2 . One could still type these parameters as just string or int , but this would not prevent consumers of the external function from calling it using values that are unsupported by the JavaScript function. Let\u2019s see how we can use polymorphic variants to avoid runtime errors. If the values are strings, we can use the bs.string attribute: external read_file_sync : name:string -> ([ `utf8 | `ascii ][@bs.string]) -> string = \"readFileSync\" [@@bs.module \"fs\"] let _ = read_file_sync ~name:\"xx.txt\" `ascii Which generates: var Fs = require(\"fs\"); Fs.readFileSync(\"xx.txt\", \"ascii\"); This technique can be combined with the bs.as attribute to modify the strings produced from the polymorphic variant values. For example: type document type style external document : document = \"document\" [@@bs.val] external get_by_id : document -> string -> Dom.element = \"getElementById\" [@@bs.send] external style : Dom.element -> style = \"style\" [@@bs.get] external transition_timing_function : style -> [ `ease | `easeIn [@bs.as \"ease-in\"] | `easeOut [@bs.as \"ease-out\"] | `easeInOut [@bs.as \"ease-in-out\"] | `linear ] -> unit = \"transitionTimingFunction\" [@@bs.set] let element_style = style (get_by_id document \"my-id\") let () = transition_timing_function element_style `easeIn This will generate: var element_style = document.getElementById(\"my-id\").style; element_style.transitionTimingFunction = \"ease-in\"; Aside from producing string values, Melange also offers bs.int to produce integer values. bs.int can also be combined with bs.as : external test_int_type : ([ `on_closed | `on_open [@bs.as 20] | `in_bin ][@bs.int]) -> int = \"testIntType\" [@@bs.val] let value = test_int_type `on_open In this example, on_closed will be encoded as 0, on_open will be 20 due to the attribute bs.as and in_bin will be 21, because if no bs.as annotation is provided for a variant tag, the compiler continues assigning values counting up from the previous one. This code generates: var value = testIntType(20);","title":"Using polymorphic variants to bind to enums"},{"location":"communicate-with-javascript/#using-polymorphic-variants-to-bind-to-event-listeners","text":"Polymorphic variants can also be used to wrap event listeners, or any other kind of callback, for example: type readline external on : readline -> ([ `close of unit -> unit | `line of string -> unit ][@bs.string]) -> readline = \"on\" [@@bs.send] let register rl = rl |. on (`close (fun event -> ())) |. on (`line (fun line -> Js.log line)) This generates: function register(rl) { return rl .on(\"close\", function($$event) {}) .on(\"line\", function(line) { console.log(line); }); }","title":"Using polymorphic variants to bind to event listeners"},{"location":"communicate-with-javascript/#constant-values-as-arguments","text":"Sometimes we want to call a JavaScript function and make sure one of the arguments is always constant. For this, the [@bs.as] attribute can be combined with the wildcard pattern _ : external process_on_exit : (_[@bs.as \"exit\"]) -> (int -> unit) -> unit = \"process.on\" [@@bs.val] let () = process_on_exit (fun exit_code -> Js.log (\"error code: \" ^ string_of_int exit_code)) This generates: process.on(\"exit\", function (exitCode) { console.log(\"error code: \" + exitCode.toString()); }); The bs.as \"exit\" and the wildcard _ pattern together will tell Melange to compile the first argument of the JavaScript function to the string \"exit\" . You can also use any JSON literal by passing a quoted string to bs.as : bs.as {json|true|json} or bs.as {json|{\"name\": \"John\"}|json} .","title":"Constant values as arguments"},{"location":"communicate-with-javascript/#binding-to-callbacks","text":"In OCaml, all functions have arity 1. This means that if you define a function like this: let add x y = x + y Its type will be int -> int -> int . This means that one can partially apply add by calling add 1 , which will return another function expecting the second argument of the addition. This kind of functions are called \"curried\" functions, more information about currying in OCaml can be found in this chapter of the \"OCaml Programming: Correct + Efficient + Beautiful\" book. This is incompatible with how function calling conventions work in JavaScript, where all function calls always apply all the arguments. To continue the example, let\u2019s say we have an add function implemented in JavaScript, similar to the one above: var add = function (a, b) { return a + b; }; If we call add(1) , the function will be totally applied, with b having undefined value. And as JavaScript will try to add 1 with undefined , we will get NaN as a result. To illustrate this difference and how it affects Melange bindings, let\u2019s say we want to write bindings for a JavaScript function like this: function map (a, b, f){ var i = Math.min(a.length, b.length); var c = new Array(i); for(var j = 0; j < i; ++j){ c[j] = f(a[i],b[i]) } return c ; } A naive external function declaration could be as below: external map : 'a array -> 'b array -> ('a -> 'b -> 'c) -> 'c array = \"map\" [@@bs.val] Unfortunately, this is not completely correct. The issue is in the callback function, with type 'a -> 'b -> 'c . This means that map will expect a function like add described above. But as we said, in OCaml, having two arguments means just to have two functions that take one argument. Let\u2019s rewrite add to make the problem a bit more clear: let add x = let partial y = x + y in partial This will be compiled to: function add(x) { return (function (y) { return x + y | 0; }); } Now if we ever used our external function map with our add function by calling map arr1 arr2 add it would not work as expected. JavaScript function application does not work the same as in OCaml, so the function call in the map implementation, f(a[i],b[i]) , would be applied over the outer JavaScript function add , which only takes one argument x , and b[i] would be just discarded. The value returned from the operation would not be the addition of the two numbers, but rather the inner anonymous callback. To solve this mismatch between OCaml and JavaScript functions and their application, Melange provides a special attribute @bs that can be used with external functions. In the example above: external map : 'a array -> 'b array -> (('a -> 'b -> 'c)[@bs]) -> 'c array = \"map\" [@@bs.val] Here ('a -> 'b -> 'c [@bs]) will be interpreted as having arity 2, in general, 'a0 -> 'a1 ...\u200b 'aN -> 'b0 [@bs] is the same as 'a0 -> 'a1 ...\u200b 'aN -> 'b0 except the former\u2019s arity is guaranteed to be N while the latter is unknown. If we try now to call map using add : let add x y = x + y let _ = map [||] [||] add We will get an error: let _ = map [||] [||] add ^^^ This expression has type int -> int -> int but an expression was expected of type ('a -> 'b -> 'c) Js.Fn.arity2 To solve this, we add @bs in the function definition as well: let add = fun [@bs] x y -> x + y Annotating function definitions can be quite cumbersome when writing a lot of externals. To work around the verbosity, Melange offers another attribute called bs.uncurry . Let\u2019s see how we could use it in the previous example. We just need to replace bs with bs.uncurry : external map : 'a array -> 'b array -> (('a -> 'b -> 'c)[@bs.uncurry]) -> 'c array = \"map\" [@@bs.val] Now if we try to call map with a regular add function: let add x y = x + y let _ = map [||] [||] add Everything works fine now, without having to attach any attributes to add . The main difference between bs and bs.uncurry is that the latter only works with externals. bs.uncurry is the recommended option to use for bindings, while bs remains useful for those use cases where performance is crucial and we want the JavaScript functions generated from OCaml ones to not be applied partially.","title":"Binding to callbacks"},{"location":"communicate-with-javascript/#modeling-this-based-callbacks","text":"Many JavaScript libraries have callbacks which rely on the this keyword , for example: x.onload = function(v) { console.log(this.response + v) } Inside the x.onload callback, this would be pointing to x . It would not be correct to declare x.onload of type unit -> unit . Instead, Melange introduces a special attribute, bs.this , which allows to type x as this: type x external x : x = \"x\" [@@bs.val] external set_onload : x -> ((x -> int -> unit)[@bs.this]) -> unit = \"onload\" [@@bs.set] external resp : x -> int = \"response\" [@@bs.get] let _ = set_onload x begin fun [@bs.this] o v -> Js.log (resp o + v) end Which generates: x.onload = function (v) { var o = this; console.log((o.response + v) | 0); }; Note that the first argument will be reserved for this .","title":"Modeling this-based Callbacks"},{"location":"communicate-with-javascript/#wrapping-returned-nullable-values","text":"For JavaScript functions that return a value that can be undefined or null , Melange provides bs.return . Using this attribute will have Melange generated code automatically convert the value returned by the function to an option type that can be used safely from Melange side, avoiding the need to use manual conversion functions like Js.Nullable.toOption and such. type element type document external get_by_id : document -> string -> element option = \"getElementById\" [@@bs.send] [@@bs.return nullable] let test document = let elem = get_by_id document \"header\" in match elem with | None -> 1 | Some _element -> 2 Which generates: function test($$document) { var elem = $$document.getElementById(\"header\"); if (elem == null) { return 1; } else { return 2; } } The bs.return attribute takes an attribute payload, as seen with [@@bs.return nullable] above. Currently 4 directives are supported: null_to_opt , undefined_to_opt , nullable and identity . nullable is encouraged, as it will convert from null and undefined to option type. identity will make sure that compiler will do nothing about the returned value. It is rarely used, but introduced here for debugging purposes.","title":"Wrapping returned nullable values"},{"location":"community/","text":"Community The community tends to congregate in the following forums: OCaml Discourse Web Forum is a friendly, online forum for OCaml discussion. If you prefer to have long-form conversation rather than just chatting, this is the place to do it. Reason Discord , where there is a specific #melange channel OCaml Discord Melange GitHub repository","title":"Community"},{"location":"community/#community","text":"The community tends to congregate in the following forums: OCaml Discourse Web Forum is a friendly, online forum for OCaml discussion. If you prefer to have long-form conversation rather than just chatting, this is the place to do it. Reason Discord , where there is a specific #melange channel OCaml Discord Melange GitHub repository","title":"Community"},{"location":"getting-started/","text":"Getting started Get up and running with Melange in no time! Install a package manager To work with Melange, you need to install a package manager compatible with OCaml. If you are not sure which one to use, we recommend opam , a source-based package manager for OCaml, but there are other alternatives available. Instructions for installing opam on different operating systems can be found at the opam install page , and you can find a whole section about it on this website. Template The easiest way to get started with Melange is by using the melange-opam-template . You can clone it from this link , and follow the instructions in the readme file to configure the local opam switch and download the necessary dependencies to build the project. Editor integration One of the goals of Melange is to remain compatible with OCaml. One of the major benefits of this compatibility is that developers working on Melange projects can use the same editor tooling as they would for OCaml. OCaml developer tooling has been built, tested, and refined over the years, with plugins available for many editors. The most actively maintained plugins are for Visual Studio Code, Emacs, and Vim. For Visual Studio Code, install the OCaml Platform Visual Studio Code extension from the Visual Studio Marketplace. When you load an OCaml source file for the first time, you may be prompted to select the toolchain to use. Select the version of OCaml you are using from the list, such as 4.14.1. Further instructions for configuration can be found in the extension repository . For Emacs and Vim, the configuration may vary depending on the case, and there are several options available. You can read about them in the editor setup page of the OCamlverse documentation site. NOTE: Melange editor integration currently only works with 4.14.x, even though it can compile melange projects on other OCaml switches. Alternative package managers (experimental) Although the recommended setup for Melange projects is with opam, Melange can also be used with other package managers, such as esy and Nix . There is also a Melange project template for esy available, similar in spirit to the Melange opam template mentioned above.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Get up and running with Melange in no time!","title":"Getting started"},{"location":"getting-started/#install-a-package-manager","text":"To work with Melange, you need to install a package manager compatible with OCaml. If you are not sure which one to use, we recommend opam , a source-based package manager for OCaml, but there are other alternatives available. Instructions for installing opam on different operating systems can be found at the opam install page , and you can find a whole section about it on this website.","title":"Install a package manager"},{"location":"getting-started/#template","text":"The easiest way to get started with Melange is by using the melange-opam-template . You can clone it from this link , and follow the instructions in the readme file to configure the local opam switch and download the necessary dependencies to build the project.","title":"Template"},{"location":"getting-started/#editor-integration","text":"One of the goals of Melange is to remain compatible with OCaml. One of the major benefits of this compatibility is that developers working on Melange projects can use the same editor tooling as they would for OCaml. OCaml developer tooling has been built, tested, and refined over the years, with plugins available for many editors. The most actively maintained plugins are for Visual Studio Code, Emacs, and Vim. For Visual Studio Code, install the OCaml Platform Visual Studio Code extension from the Visual Studio Marketplace. When you load an OCaml source file for the first time, you may be prompted to select the toolchain to use. Select the version of OCaml you are using from the list, such as 4.14.1. Further instructions for configuration can be found in the extension repository . For Emacs and Vim, the configuration may vary depending on the case, and there are several options available. You can read about them in the editor setup page of the OCamlverse documentation site. NOTE: Melange editor integration currently only works with 4.14.x, even though it can compile melange projects on other OCaml switches.","title":"Editor integration"},{"location":"getting-started/#alternative-package-managers-experimental","text":"Although the recommended setup for Melange projects is with opam, Melange can also be used with other package managers, such as esy and Nix . There is also a Melange project template for esy available, similar in spirit to the Melange opam template mentioned above.","title":"Alternative package managers (experimental)"},{"location":"learn/","text":"Learn This section is organized in four separate parts: New to OCaml? Package management Build system Communicate with JavaScript","title":"Learn"},{"location":"learn/#learn","text":"This section is organized in four separate parts: New to OCaml? Package management Build system Communicate with JavaScript","title":"Learn"},{"location":"new-to-ocaml/","text":"New to OCaml? As a backend for the OCaml compiler, Melange shares many similarities with the OCaml language. Nevertheless, there are some notable differences between the two. This documentation aims to clarify these distinctions. For features that Melange inherits from OCaml, readers will be directed to the main OCaml documentation. If you are completely new to OCaml, it is recommended to familiarize yourself with the language first. Learn OCaml is a good starting point. but we recommend the following tutorials from the official OCaml website: A First Hour With OCaml OCaml Exercises","title":"New to OCaml?"},{"location":"new-to-ocaml/#new-to-ocaml","text":"As a backend for the OCaml compiler, Melange shares many similarities with the OCaml language. Nevertheless, there are some notable differences between the two. This documentation aims to clarify these distinctions. For features that Melange inherits from OCaml, readers will be directed to the main OCaml documentation. If you are completely new to OCaml, it is recommended to familiarize yourself with the language first. Learn OCaml is a good starting point. but we recommend the following tutorials from the official OCaml website: A First Hour With OCaml OCaml Exercises","title":"New to OCaml?"},{"location":"package-management/","text":"Package management Melange uses a dual approach to package management: For Melange libraries and bindings, use opam . For JavaScript packages required by Melange bindings, use npm (or any of its alternatives ). This dual approach has some obvious downsides, such as forcing Melange applications to have both an <app_name>.opam and a package.json file. However, it unlocks the advantages of both ecosystems. As we will see below, opam has been designed for the OCaml language, which makes the developer experience fundamentally different from npm in the way it handles and installs dependencies. In the following sections, we will go through the details of how to use opam to define the dependencies of our application, as well as how to publish packages in the public opam repository. However, this documentation is not exhaustive and only covers what we believe are the most important parts for Melange developers. If you want to learn more about opam, please refer to the opam manual and FAQ page . opam for Melange developers Before diving into specifics about using opam, there are the two relevant differences between opam and npm that are worth mentioning. 1. One version of each package At any given time, any opam switch can only at most a single version of a package. This is known as a flat dependency graph, and some package managers in other languages (like Bower ) follow a similar approach. A flat dependency graph means that, for example, it is impossible to have two versions of reason-react installed in the same project. This avoids some headaches when one inadvertently installs two versions of a dependency. Also, and specifically for Melange, it helps keep the resulting JavaScript bundle lean and reduce page load for browser-based applications. On the other hand, upgrading your project dependencies to more recent versions might become tricky. Due to the restriction where only one version of a package can be installed, there is a higher chance for conflicts between the constraints of the transitive dependencies. If opam cannot find a solution, these conflicts need to be solved manually. This generally involves updating the conflicting dependency to make it compatible with a newer version of Melange or a transient dependency. 2. A source-based package manager for a compiled language opam distributes just the source code of the packages and leaves the compilation step to a build phase that runs when consuming them, after they have been fetched. As the package manager for a compiled language like OCaml, opam has first-class support for this build step. Every package must tell opam how it should be built, and the way to do this is by using the build field in the package .opam file. This is different from how npm handles packages. Because npm has been designed for JavaScript (an interpreted language) having a build step makes no sense. Whenever any project or community tries to use npm to distribute software that includes code written in compiled languages, the burden to distribute pre-built binaries is imposed on library authors, like the node-sass example shows. As Melange relies heavily on OCaml packages for the compilation step (either PPXs, linters, instrumentation, or any other build-time package), using opam provides access to these tools without library authors having to care about creating and distributing pre-built versions of their packages. Let\u2019s go now through the most common actions with opam when working on Melange projects. The following guide is based on the amazing opam for npm/yarn users guide by Louis ( @khady ). Initial configuration The first thing to do is to install opam. There is an official documentation page on installation. Most of the time, we can get it from your package manager. Otherwise, binaries are provided for every platform. There is a necessary first step before using opam: opam init -a Here is what the documentation of the opam init command says: The init command initialises a local \"opam root\" (by default, ~/.opam/ ) that holds opam\u2019s data and packages. This is a necessary step for normal operation of opam. The initial software repositories are fetched, and an initial 'switch' can also be installed, according to the configuration and options. These can be afterwards configured using opam switch and opam repository. Additionally, this command allows to customise some aspects of opam\u2019s shell integration, when run initially (avoiding the interactive dialog), but also at any later time. The interesting parts are: The opam root is at ~/.opam opam uses shell integration to make our life easier opam uses the concept of a switch A switch is the equivalent of the node_modules folder in npm\u2019s world. It contains all the packages that are installed. There are local switches and global switches, in the same way we can have a node_modules folder local to our project or install global dependencies using yarn global or npm install -g . Global switches can be handy sometimes, but to avoid confusion, the recommendation is to avoid them. The default settings can be changed if the -a option is omitted while calling opam init . Minimal app.opam file The equivalent to package.json is an app.opam file, where app is the name of the package. It is possible to have multiple opam files in the same directory or project. There is no opam command to manipulate the opam file. A command similar to npm init or yarn add does not exist in opam, so the updates in .opam files have to be done by hand. A minimal .opam file looks like this: opam-version: \"2.0\" name: \"my-app\" authors: \"Louis\" homepage: \"https://github.com/khady/example\" maintainer: \"ex@ample.com\" dev-repo: \"git+ssh://git@github.com:khady/example.git\" bug-reports: \"https://github.com/khady/example/issues\" version: \"0.1\" build: [ [ \"dune\" \"subst\" ] {pinned} [ \"dune\" \"build\" \"-p\" name \"-j\" jobs ] ] depends: [ \"dune\" {build} ] build: tells opam that dune is needed only to build the project. Installing packages The first thing we need is a local switch in the current project. To verify if a switch exists already, we can look for a _opam directory at the root of the project or use the opam switch command to identify if a switch already exists in the project folder. If it does not exist, we can create it with: opam switch create . 4.14.1 --deps-only If it exists, we can install the dependencies of the project with: opam install . --deps-only Add new packages To add a new package to the opam switch, we can do: opam install <package_name> But opam will not modify the app.opam file during the installation, this has to be done by hand, by adding the name of the package in the depends field. Linking packages for development This can be achieved with opam pin . For example, to pin a package to a specific commit on GitHub: opam pin add reason-react.dev https://github.com/reasonml/reason-react.git#61bfbfaf8c971dec5152bce7e528d30552c70bc5 Branch names can also be used. opam pin add reason-react.dev https://github.com/reasonml/reason-react.git#feature A shortcut to get the latest version of a package is to use the --dev-repo flag, e.g. opam pin add reason-react.dev --dev-repo To remove the pinning for any package, use opam unpin <package_name> or opam pin remove <package_name> . For other options, the command is well described in the official documentation . Upgrading packages To upgrade the installed packages to the latest version, run: opam upgrade <package_name> opam upgrade is also able to upgrade all the packages of the local switch if no package name is given. There is one big difference compared to npm: opam stores a local copy of the opam repository, like apt-get does in Debian. So we often want to update this copy before requesting an upgrade: opam update && opam upgrade <package_name> Dev dependencies You can use the with-dev-setup field to define dependencies that are only required at development time. For example: depends: [ \"ocamlformat\" {with-dev-setup} ] This has to be combined with the --with-dev-setup flag when installing dependencies, e.g. opam install --deps-only --with-dev-setup . Lock files Lock files are also not common yet in the opam world, but they can be used as follows: Using opam lock to generate the lock file when needed (basically after each opam install or opam upgrade ). Adding --locked to all the opam install --deps-only and opam switch create . commands. Bindings and package management When writing Melange libraries that bind to existing JavaScript packages, the users of the Melange library will have to make sure to install those JavaScript packages manually. This is similar to how OCaml bindings to system libraries work, see examples like ocaml-mariadb or ocurl . The advantage of this approach \u2014as opposed to vendoring the JavaScript packages inside the bindings\u2014 is that it gives users of the bindings complete flexibility over the way these JavaScript packages are downloaded and bundled.","title":"Package management"},{"location":"package-management/#package-management","text":"Melange uses a dual approach to package management: For Melange libraries and bindings, use opam . For JavaScript packages required by Melange bindings, use npm (or any of its alternatives ). This dual approach has some obvious downsides, such as forcing Melange applications to have both an <app_name>.opam and a package.json file. However, it unlocks the advantages of both ecosystems. As we will see below, opam has been designed for the OCaml language, which makes the developer experience fundamentally different from npm in the way it handles and installs dependencies. In the following sections, we will go through the details of how to use opam to define the dependencies of our application, as well as how to publish packages in the public opam repository. However, this documentation is not exhaustive and only covers what we believe are the most important parts for Melange developers. If you want to learn more about opam, please refer to the opam manual and FAQ page .","title":"Package management"},{"location":"package-management/#opam-for-melange-developers","text":"Before diving into specifics about using opam, there are the two relevant differences between opam and npm that are worth mentioning. 1. One version of each package At any given time, any opam switch can only at most a single version of a package. This is known as a flat dependency graph, and some package managers in other languages (like Bower ) follow a similar approach. A flat dependency graph means that, for example, it is impossible to have two versions of reason-react installed in the same project. This avoids some headaches when one inadvertently installs two versions of a dependency. Also, and specifically for Melange, it helps keep the resulting JavaScript bundle lean and reduce page load for browser-based applications. On the other hand, upgrading your project dependencies to more recent versions might become tricky. Due to the restriction where only one version of a package can be installed, there is a higher chance for conflicts between the constraints of the transitive dependencies. If opam cannot find a solution, these conflicts need to be solved manually. This generally involves updating the conflicting dependency to make it compatible with a newer version of Melange or a transient dependency. 2. A source-based package manager for a compiled language opam distributes just the source code of the packages and leaves the compilation step to a build phase that runs when consuming them, after they have been fetched. As the package manager for a compiled language like OCaml, opam has first-class support for this build step. Every package must tell opam how it should be built, and the way to do this is by using the build field in the package .opam file. This is different from how npm handles packages. Because npm has been designed for JavaScript (an interpreted language) having a build step makes no sense. Whenever any project or community tries to use npm to distribute software that includes code written in compiled languages, the burden to distribute pre-built binaries is imposed on library authors, like the node-sass example shows. As Melange relies heavily on OCaml packages for the compilation step (either PPXs, linters, instrumentation, or any other build-time package), using opam provides access to these tools without library authors having to care about creating and distributing pre-built versions of their packages. Let\u2019s go now through the most common actions with opam when working on Melange projects. The following guide is based on the amazing opam for npm/yarn users guide by Louis ( @khady ).","title":"opam for Melange developers"},{"location":"package-management/#initial-configuration","text":"The first thing to do is to install opam. There is an official documentation page on installation. Most of the time, we can get it from your package manager. Otherwise, binaries are provided for every platform. There is a necessary first step before using opam: opam init -a Here is what the documentation of the opam init command says: The init command initialises a local \"opam root\" (by default, ~/.opam/ ) that holds opam\u2019s data and packages. This is a necessary step for normal operation of opam. The initial software repositories are fetched, and an initial 'switch' can also be installed, according to the configuration and options. These can be afterwards configured using opam switch and opam repository. Additionally, this command allows to customise some aspects of opam\u2019s shell integration, when run initially (avoiding the interactive dialog), but also at any later time. The interesting parts are: The opam root is at ~/.opam opam uses shell integration to make our life easier opam uses the concept of a switch A switch is the equivalent of the node_modules folder in npm\u2019s world. It contains all the packages that are installed. There are local switches and global switches, in the same way we can have a node_modules folder local to our project or install global dependencies using yarn global or npm install -g . Global switches can be handy sometimes, but to avoid confusion, the recommendation is to avoid them. The default settings can be changed if the -a option is omitted while calling opam init .","title":"Initial configuration"},{"location":"package-management/#minimal-appopam-file","text":"The equivalent to package.json is an app.opam file, where app is the name of the package. It is possible to have multiple opam files in the same directory or project. There is no opam command to manipulate the opam file. A command similar to npm init or yarn add does not exist in opam, so the updates in .opam files have to be done by hand. A minimal .opam file looks like this: opam-version: \"2.0\" name: \"my-app\" authors: \"Louis\" homepage: \"https://github.com/khady/example\" maintainer: \"ex@ample.com\" dev-repo: \"git+ssh://git@github.com:khady/example.git\" bug-reports: \"https://github.com/khady/example/issues\" version: \"0.1\" build: [ [ \"dune\" \"subst\" ] {pinned} [ \"dune\" \"build\" \"-p\" name \"-j\" jobs ] ] depends: [ \"dune\" {build} ] build: tells opam that dune is needed only to build the project.","title":"Minimal app.opam file"},{"location":"package-management/#installing-packages","text":"The first thing we need is a local switch in the current project. To verify if a switch exists already, we can look for a _opam directory at the root of the project or use the opam switch command to identify if a switch already exists in the project folder. If it does not exist, we can create it with: opam switch create . 4.14.1 --deps-only If it exists, we can install the dependencies of the project with: opam install . --deps-only","title":"Installing packages"},{"location":"package-management/#add-new-packages","text":"To add a new package to the opam switch, we can do: opam install <package_name> But opam will not modify the app.opam file during the installation, this has to be done by hand, by adding the name of the package in the depends field.","title":"Add new packages"},{"location":"package-management/#linking-packages-for-development","text":"This can be achieved with opam pin . For example, to pin a package to a specific commit on GitHub: opam pin add reason-react.dev https://github.com/reasonml/reason-react.git#61bfbfaf8c971dec5152bce7e528d30552c70bc5 Branch names can also be used. opam pin add reason-react.dev https://github.com/reasonml/reason-react.git#feature A shortcut to get the latest version of a package is to use the --dev-repo flag, e.g. opam pin add reason-react.dev --dev-repo To remove the pinning for any package, use opam unpin <package_name> or opam pin remove <package_name> . For other options, the command is well described in the official documentation .","title":"Linking packages for development"},{"location":"package-management/#upgrading-packages","text":"To upgrade the installed packages to the latest version, run: opam upgrade <package_name> opam upgrade is also able to upgrade all the packages of the local switch if no package name is given. There is one big difference compared to npm: opam stores a local copy of the opam repository, like apt-get does in Debian. So we often want to update this copy before requesting an upgrade: opam update && opam upgrade <package_name>","title":"Upgrading packages"},{"location":"package-management/#dev-dependencies","text":"You can use the with-dev-setup field to define dependencies that are only required at development time. For example: depends: [ \"ocamlformat\" {with-dev-setup} ] This has to be combined with the --with-dev-setup flag when installing dependencies, e.g. opam install --deps-only --with-dev-setup .","title":"Dev dependencies"},{"location":"package-management/#lock-files","text":"Lock files are also not common yet in the opam world, but they can be used as follows: Using opam lock to generate the lock file when needed (basically after each opam install or opam upgrade ). Adding --locked to all the opam install --deps-only and opam switch create . commands.","title":"Lock files"},{"location":"package-management/#bindings-and-package-management","text":"When writing Melange libraries that bind to existing JavaScript packages, the users of the Melange library will have to make sure to install those JavaScript packages manually. This is similar to how OCaml bindings to system libraries work, see examples like ocaml-mariadb or ocurl . The advantage of this approach \u2014as opposed to vendoring the JavaScript packages inside the bindings\u2014 is that it gives users of the bindings complete flexibility over the way these JavaScript packages are downloaded and bundled.","title":"Bindings and package management"},{"location":"rationale/","text":"Why Melange OCaml offers an industrial-strength, state-of-the-art type system and provides type inference with very few type annotations, proving invaluable in managing large projects. JavaScript is one of the most pervasive platforms to deploy and run software. Thanks to years of efforts to improve the different VMs available, the JavaScript code running on browsers and other environments is heavily optimized and can support use cases for large products and tools. Melange helps developers and companies bring the advantages of the OCaml platform to users of the Web platform in a way that makes it easy for developers to integrate with both ecosystems. A bit of history To better understand where Melange comes from, it might help to go through some of the related projects that have appeared over the last decade or so. Js_of_ocaml Js_of_ocaml is another OCaml to JavaScript compiler that was made public in 2011. In the presentation paper published in 2013, it\u2019s explicitly mentioned that one of its design goals was to remain as compatible as possible with the OCaml compiler, without requiring a lot of maintenance work, as the OCaml community was not excessively large at the time. To achieve this goal, Js_of_ocaml picks the bytecode generated by OCaml batch compilation and generates JavaScript from it. OCaml bytecode has a very stable interface, so Js_of_ocaml can easily upgrade to new versions of the compiler. Due to this design decision, it can also remain compatible with most of the OCaml ecosystem, as long as the tools or libraries don\u2019t rely on C code. The downside of using bytecode is that it gets harder to communicate with existing JavaScript code. This is due to both the constraints on runtime representations that Js_of_ocaml can use for OCaml values, and also the compilation model used, where one bytecode program is compiled to one JavaScript program, but it is not possible to generate an individual JavaScript module from one OCaml module. Another downside is that the resulting JavaScript is hard to read, as it is converted from a low-level representation like bytecode. BuckleScript Then, in 2016, Bob Zhang suggests on a Js_of_ocaml repository issue the possibility to start converting to JavaScript from an earlier stage of the compilation process, instead of using bytecode. This proposal fundamentally diverges from Js_of_ocaml original design and goals, so he starts working on what will become BuckleScript. BuckleScript gets some inspiration from Js_of_ocaml, for example in the way that JavaScript objects are represented with Js.t . But it differs from Js_of_ocaml in many ways: it can generate more readable and lighter code. It also generates one .js file per module, which makes it easier to integrate with existing JavaScript codebases. BuckleScript puts a big emphasis on communicating with JavaScript code through a rich collection of attributes applied to external primitives. Reason Around the same year, a project called Reason appears at Facebook. Led by Jordan Walke, the idea is to create an alternate syntax for OCaml that is closer to C and JavaScript. Even if Reason has no take on which platform the code is deployed \u2014native applications binaries, or web applications using JavaScript as a target language\u2014, BuckleScript adds first class support for Reason from early on. At that point, it becomes evident that the combination of Reason with BuckleScript is a great match: BuckleScript provides tools and infrastructure to work with JavaScript ecosystem, while Reason allows developers to write their programs in a syntax they are familiar with. Over time, and with help of other Facebook employees and the community providing bindings to pervasive JavaScript libraries like React.js with reason-react , the combination of Reason and BuckleScript gains adoption. BuckleScript gets rebranded However, at some point the goals of both BuckleScript and Reason projects become harder to reconcile. In August 2020, the BuckleScript team decides to rename to ReScript, stops adding support for the latest versions of the Reason parser, and replaces it with a new parser that changes the syntax. The reasons for the rebranding are explained in the official ReScript blog post . The rebranding is trying to ease onboarding and adoption of the ReScript language, giving the project more chances to compete with mainstream compiled-to-JavaScript languages like TypeScript. However, for many existing users of BuckleScript and Reason, it is the explicit confirmation of something that had been hinted implicitly before: ReScript goals are not compatible with providing a good integration with the OCaml ecosystem. Melange: back to OCaml This is where Melange comes in. A few weeks after the rebranding of BuckleScript to ReScript, Ant\u00f3nio Monteiro starts working on a fork of BuckleScript with a simple (not easy) goal: replace the Ninja build system , which BuckleScript had been using from its creation, with Dune , which is the most used build system for OCaml projects. This fork of BuckleScript is later named Melange. After finishing the switch from Ninja to Dune, several additional features are added to bring it closer to OCaml. Some examples are the upgrade of the OCaml compiler version used by Melange, or modeling the changes to the OCaml compiler that Melange uses as just a plain library, instead of a full fork of the upstream compiler. In September 2022, Ahrefs decides to invest on Melange by funding a project to deepen the integration between Dune and Melange. This project achieves its completion in Spring 2023, with the migration of Ahrefs frontend codebase to Melange and the new public releases that support it: version 3.8 of Dune and 1.0 of Melange.","title":"Why"},{"location":"rationale/#why-melange","text":"OCaml offers an industrial-strength, state-of-the-art type system and provides type inference with very few type annotations, proving invaluable in managing large projects. JavaScript is one of the most pervasive platforms to deploy and run software. Thanks to years of efforts to improve the different VMs available, the JavaScript code running on browsers and other environments is heavily optimized and can support use cases for large products and tools. Melange helps developers and companies bring the advantages of the OCaml platform to users of the Web platform in a way that makes it easy for developers to integrate with both ecosystems.","title":"Why Melange"},{"location":"rationale/#a-bit-of-history","text":"To better understand where Melange comes from, it might help to go through some of the related projects that have appeared over the last decade or so.","title":"A bit of history"},{"location":"rationale/#js_of_ocaml","text":"Js_of_ocaml is another OCaml to JavaScript compiler that was made public in 2011. In the presentation paper published in 2013, it\u2019s explicitly mentioned that one of its design goals was to remain as compatible as possible with the OCaml compiler, without requiring a lot of maintenance work, as the OCaml community was not excessively large at the time. To achieve this goal, Js_of_ocaml picks the bytecode generated by OCaml batch compilation and generates JavaScript from it. OCaml bytecode has a very stable interface, so Js_of_ocaml can easily upgrade to new versions of the compiler. Due to this design decision, it can also remain compatible with most of the OCaml ecosystem, as long as the tools or libraries don\u2019t rely on C code. The downside of using bytecode is that it gets harder to communicate with existing JavaScript code. This is due to both the constraints on runtime representations that Js_of_ocaml can use for OCaml values, and also the compilation model used, where one bytecode program is compiled to one JavaScript program, but it is not possible to generate an individual JavaScript module from one OCaml module. Another downside is that the resulting JavaScript is hard to read, as it is converted from a low-level representation like bytecode.","title":"Js_of_ocaml"},{"location":"rationale/#bucklescript","text":"Then, in 2016, Bob Zhang suggests on a Js_of_ocaml repository issue the possibility to start converting to JavaScript from an earlier stage of the compilation process, instead of using bytecode. This proposal fundamentally diverges from Js_of_ocaml original design and goals, so he starts working on what will become BuckleScript. BuckleScript gets some inspiration from Js_of_ocaml, for example in the way that JavaScript objects are represented with Js.t . But it differs from Js_of_ocaml in many ways: it can generate more readable and lighter code. It also generates one .js file per module, which makes it easier to integrate with existing JavaScript codebases. BuckleScript puts a big emphasis on communicating with JavaScript code through a rich collection of attributes applied to external primitives.","title":"BuckleScript"},{"location":"rationale/#reason","text":"Around the same year, a project called Reason appears at Facebook. Led by Jordan Walke, the idea is to create an alternate syntax for OCaml that is closer to C and JavaScript. Even if Reason has no take on which platform the code is deployed \u2014native applications binaries, or web applications using JavaScript as a target language\u2014, BuckleScript adds first class support for Reason from early on. At that point, it becomes evident that the combination of Reason with BuckleScript is a great match: BuckleScript provides tools and infrastructure to work with JavaScript ecosystem, while Reason allows developers to write their programs in a syntax they are familiar with. Over time, and with help of other Facebook employees and the community providing bindings to pervasive JavaScript libraries like React.js with reason-react , the combination of Reason and BuckleScript gains adoption.","title":"Reason"},{"location":"rationale/#bucklescript-gets-rebranded","text":"However, at some point the goals of both BuckleScript and Reason projects become harder to reconcile. In August 2020, the BuckleScript team decides to rename to ReScript, stops adding support for the latest versions of the Reason parser, and replaces it with a new parser that changes the syntax. The reasons for the rebranding are explained in the official ReScript blog post . The rebranding is trying to ease onboarding and adoption of the ReScript language, giving the project more chances to compete with mainstream compiled-to-JavaScript languages like TypeScript. However, for many existing users of BuckleScript and Reason, it is the explicit confirmation of something that had been hinted implicitly before: ReScript goals are not compatible with providing a good integration with the OCaml ecosystem.","title":"BuckleScript gets rebranded"},{"location":"rationale/#melange-back-to-ocaml","text":"This is where Melange comes in. A few weeks after the rebranding of BuckleScript to ReScript, Ant\u00f3nio Monteiro starts working on a fork of BuckleScript with a simple (not easy) goal: replace the Ninja build system , which BuckleScript had been using from its creation, with Dune , which is the most used build system for OCaml projects. This fork of BuckleScript is later named Melange. After finishing the switch from Ninja to Dune, several additional features are added to bring it closer to OCaml. Some examples are the upgrade of the OCaml compiler version used by Melange, or modeling the changes to the OCaml compiler that Melange uses as just a plain library, instead of a full fork of the upstream compiler. In September 2022, Ahrefs decides to invest on Melange by funding a project to deepen the integration between Dune and Melange. This project achieves its completion in Spring 2023, with the migration of Ahrefs frontend codebase to Melange and the new public releases that support it: version 3.8 of Dune and 1.0 of Melange.","title":"Melange: back to OCaml"},{"location":"try/","text":"Try TBD. In this page, we will show some playground, in the same spirit as https://reasonml.github.io/en/try .","title":"Playground"},{"location":"try/#try","text":"TBD. In this page, we will show some playground, in the same spirit as https://reasonml.github.io/en/try .","title":"Try"}]}